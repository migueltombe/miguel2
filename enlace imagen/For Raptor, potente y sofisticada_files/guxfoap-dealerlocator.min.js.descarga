define('ie-detect', ['jquery'], function ($) {
    'use strict';

    var api = {};

    api.isIE = function () {
        var myNav = navigator.userAgent.toLowerCase();
        return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;
    };

    return api;
});

define('dealerlocator/services/ApiService',[
        'angular', 
        'dealerlocator/google-maps', 
        'dealerlocator/dealerlocator.app'], 
    function (angular, MapApi, app) {
	


    app.factory('ApiService', ApiService);

    function ApiService() {
		return MapApi;
	}

});



define('dealerlocator/services/AddressService',[
        'angular',
        'dealerlocator/dealerlocator.app'],
    function (angular, app) {

    app.factory('AddressService', ['ConfigService', AddressService]);

    function AddressService(ConfigService) {
        var api = {},
            config = ConfigService.getConfig();

        api.getAddressFormat = function() {
            return config.addressformat.split(',');
        };

        function formatAddress(dealer, formatConfig) {
            var linesIndex = 0,
            addressLines = [];

            for (var i = 0; i < formatConfig.length; i++) {
                if (!addressLines[linesIndex]) {
                    addressLines[linesIndex] = [];
                }
                if (formatConfig[i] == 'newLine' && addressLines[linesIndex].length > 0) {
                    linesIndex++;
                } else if (separatorRequired(dealer, formatConfig, i)) {
                    addressLines[linesIndex].push(ConfigService.config.dealerItemAddressSeparator);
                } else if (dealer && dealer.hasOwnProperty(formatConfig[i])) {
                    addressLines[linesIndex].push(dealer[formatConfig[i]]);
                }
            }
            for (var x = 0; x < addressLines.length; x++) {
                addressLines[x] = addressLines[x].join(' ');
            }

            return addressLines;
        }

        function joinAddress(dealer, formatConfig, custom) {
            var addressLines = ' ';
            if (!custom && formatConfig) {
                for (var i = 0; i < formatConfig.length; i++) {
                    if (separatorRequired(dealer, formatConfig, i)) {
                        addressLines += ConfigService.config.dealerItemAddressSeparator + ' ';
                    } else if (dealer && dealer.hasOwnProperty(formatConfig[i])) {
                        addressLines += dealer[formatConfig[i]] + ' ';
                    }
                }
            } else {
                var keyArr = formatConfig.split(',');
                for (var j = 0; j < keyArr.length; j++) {
                    addressLines += dealer[keyArr[j]] + ' ';
                }
            }
            return addressLines;
        }

        function separatorRequired(dealer, formatConfig, i) {
            return formatConfig[i] == 'separator' &&
                dealer && dealer.hasOwnProperty(formatConfig[i + 1]) &&
                !(!dealer[formatConfig[i + 1]].trim() || 0 === dealer[formatConfig[i + 1]]);
        }

        api.formatAddress = formatAddress;
        api.joinAddress = joinAddress;

        return api;
    }

});



define('dealerlocator/services/ConfigService', ['angular', 'dealerlocator/dealerlocator.app', '_'], 
	function (angular, app, _) {


	app.factory('ConfigService', ['DL_SERVICE',  ConfigService]);

	function ConfigService(DL_SERVICE) {
		var api = {},
			distanceConversion = {
				Miles: 1.60934,
				Km: 1
			},
			config,searchParams;

		api.getConfig = function () {
			if (!config) {
				config = loadConfig();
			}
			return config;
		};
		
		api.getSearchParams = function () {
			return searchParams;
		};
		
		api.setSearchParams = function (param) {
			 searchParams =param;
		};

		function loadConfig() {
			var filters = [],
				allServicesArray = [],
				services = {},
				configJSON;

			if (DL_SERVICE) {
				configJSON = DL_SERVICE;

				if (configJSON.categories) {
					for (var i = 0; i < configJSON.categories.length; i++) {
						var categoryFilters = configJSON.categories[i].value.split(',');
						configJSON.categories[i].filters = [];

						if (configJSON.filters) {
							for (var j = 0; j < categoryFilters.length; j++) {
								if (configJSON.filters[categoryFilters[j]] && configJSON.filters[categoryFilters[j]][0].filter) {
									configJSON.categories[i].filters.push(configJSON.filters[categoryFilters[j]][0]);
								}
							}
						}
					}
				}

				if (configJSON.filters) {
					for (var property in configJSON.filters) {
						if (configJSON.filters.hasOwnProperty(property) && !_.isUndefined(configJSON.filters[property][0])) {
							var filter = configJSON.filters[property][0];
							services[property] = filter;
							allServicesArray.push(filter);
							if (filter.filter) {
								filters.push(filter);
							}
						}
					}
				}
				
				configJSON.allServicesArray = allServicesArray;
				configJSON.filters = filters;
				configJSON.services = services;
				configJSON.distance.distanceConversion = distanceConversion[configJSON.distance.unit];
			}
			return configJSON;
		}

		return api;
	}
});

define('dealerlocator/services/DealerService', ['angular', 'dealerlocator/dealerlocator.app', 'ladSEOfriendly'],
	function (angular, app, ladSEOfriendly) {



	app.factory('DealerService', ['$rootScope', '$compile', 'TimeService', 'AddressService', 'ConfigService', DealerService]);

	function DealerService($rootScope, $compile, TimeService, AddressService, ConfigService) {

		var api = {};

		var itemDirective = '<div data-ng-gux-dealer-item data-dealer="dealer" data-config="config" data-params="params"' +
			' data-is-tooltip="true" data-main-ctrl-call-dealer="callDealer"' +
			' data-main-ctrl-get-directions="getDirections" data-main-ctrl-dealer-website="dealerWebsite"></div>';

		api.processDealer = function (dealer, config, params, callDealer, getDirections, dealerWebsite) {
			var daysDisplayOrder = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], // Display order - should probably come from service
				jsDaysOrder = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // Javascript Date order
				today = new Date(),
				services = [],
				i,
				filters = config.filters,
				countServices = 0,
				countTotalPartsOpen = 0,
				countTotalSalesOpen = 0,
				countTotalServicesOpen = 0;
			    countTotalUsedOpen = 0;

			for (i = 0; i < daysDisplayOrder.length; i++) {
				if (dealer['Parts' + daysDisplayOrder[i] + 'OpenTime'] && dealer['Parts' + daysDisplayOrder[i] + 'CloseTime']) {
				    if (dealer['Parts' + daysDisplayOrder[i] + 'OpenTime'] != "-" && dealer['Parts' + daysDisplayOrder[i] + 'CloseTime'] != "-") {
                        dealer['Parts' + daysDisplayOrder[i] + 'OpenTime'] = TimeService.formatTime(dealer['Parts' + daysDisplayOrder[i] + 'OpenTime'], config);
                        dealer['Parts' + daysDisplayOrder[i] + 'CloseTime'] = TimeService.formatTime(dealer['Parts' + daysDisplayOrder[i] + 'CloseTime'], config);
					} else {
					    dealer['Parts' + daysDisplayOrder[i] + 'OpenTime'] = "";
					    dealer['Parts' + daysDisplayOrder[i] + 'CloseTime'] = "";
					}
				} else {
				    //count how many data is empty
				    countTotalPartsOpen++;
				}
				if (dealer['Sales' + daysDisplayOrder[i] + 'OpenTime'] && dealer['Sales' + daysDisplayOrder[i] + 'CloseTime']) {
				    if (dealer['Sales' + daysDisplayOrder[i] + 'OpenTime'] != "-" && dealer['Sales' + daysDisplayOrder[i] + 'CloseTime'] != "-") {
                        dealer['Sales' + daysDisplayOrder[i] + 'OpenTime'] = TimeService.formatTime(dealer['Sales' + daysDisplayOrder[i] + 'OpenTime'], config);
                        dealer['Sales' + daysDisplayOrder[i] + 'CloseTime'] = TimeService.formatTime(dealer['Sales' + daysDisplayOrder[i] + 'CloseTime'], config);
                    } else {
                        dealer['Sales' + daysDisplayOrder[i] + 'OpenTime'] = "";
                        dealer['Sales' + daysDisplayOrder[i] + 'CloseTime'] = "";
                    }
                } else {
                    //count how many data is empty
                    countTotalSalesOpen++;
                }
                if (dealer['Service' + daysDisplayOrder[i] + 'OpenTime'] && dealer['Service' + daysDisplayOrder[i] + 'CloseTime']) {
                    if (dealer['Service' + daysDisplayOrder[i] + 'OpenTime'] != "-" && dealer['Service' + daysDisplayOrder[i] + 'CloseTime'] != "-") {
                        dealer['Service' + daysDisplayOrder[i] + 'OpenTime'] = TimeService.formatTime(dealer['Service' + daysDisplayOrder[i] + 'OpenTime'], config);
                        dealer['Service' + daysDisplayOrder[i] + 'CloseTime'] = TimeService.formatTime(dealer['Service' + daysDisplayOrder[i] + 'CloseTime'], config);
                    } else {
                        dealer['Service' + daysDisplayOrder[i] + 'OpenTime'] = "";
                        dealer['Service' + daysDisplayOrder[i] + 'CloseTime'] = "";
                    }
                } else {
                    //count how many data is empty
                    countTotalServicesOpen++;
                }
				///////used bof//////
				if (dealer['Used' + daysDisplayOrder[i] + 'OpenTime'] && dealer['Used' + daysDisplayOrder[i] + 'CloseTime']) {
                    if (dealer['Used' + daysDisplayOrder[i] + 'OpenTime'] != "-" && dealer['Used' + daysDisplayOrder[i] + 'CloseTime'] != "-") {
                        dealer['Used' + daysDisplayOrder[i] + 'OpenTime'] = TimeService.formatTime(dealer['Used' + daysDisplayOrder[i] + 'OpenTime'], config);
                        dealer['Used' + daysDisplayOrder[i] + 'CloseTime'] = TimeService.formatTime(dealer['Used' + daysDisplayOrder[i] + 'CloseTime'], config);
                    } else {
                        dealer['Used' + daysDisplayOrder[i] + 'OpenTime'] = "";
                        dealer['Used' + daysDisplayOrder[i] + 'CloseTime'] = "";
                    }
                } else {
                    //count how many data is empty
                    countTotalUsedOpen++;
                }
				///////used eof////
			}

			if(dealer.HasPartsDepartment) {
			    if(countTotalPartsOpen < 7) {
			        countServices++;
			    }
			}
			dealer.HasSalesDepartment = false;
			if(dealer.HasSalesDepartmentCV || dealer.HasSalesDepartmentPV) {
			    if(countTotalSalesOpen < 7) {
                    dealer.HasSalesDepartment = true;
                    countServices++;
			    }
			}
			dealer.HasServiceDepartment = false;
			if(dealer.HasServiceDepartmentCV || dealer.HasServiceDepartmentPV) {
			    if(countTotalServicesOpen < 7) {
                    dealer.HasServiceDepartment = true;
                    countServices++;
			    }
			}

			/////used start
			if(dealer.ApprovedUsed){
				if(countTotalUsedOpen < 7) {
                    countServices++;
			    }
			}
			
			///// used end

			dealer.HasOneServices = false;
			dealer.HasManyServices = false;
			if(countServices == 1) {
			    dealer.HasOneServices = true;
			} else if(countServices > 0) {
			    dealer.HasManyServices = true;
			}

            if (dealer.HasPartsDepartment && dealer['Parts' + jsDaysOrder[today.getDay()] + 'CloseTime']) {
                dealer.todayClosingTime = dealer['Parts' + jsDaysOrder[today.getDay()] + 'CloseTime'];
            }
			if (dealer.HasServiceDepartment && dealer['Service' + jsDaysOrder[today.getDay()] + 'CloseTime']) {
                dealer.todayClosingTime = dealer['Service' + jsDaysOrder[today.getDay()] + 'CloseTime'];
            }
            if (dealer.HasSalesDepartment && dealer['Sales' + jsDaysOrder[today.getDay()] + 'CloseTime']) {
                dealer.todayClosingTime = dealer['Sales' + jsDaysOrder[today.getDay()] + 'CloseTime'];
            }

			if (dealer.PrimaryPhone) {
				dealer.PrimaryPhoneURL = dealer.PrimaryPhone.replace(/\s/g, '');
			}

			if (dealer.PartsPhone) {
                dealer.PartsPhone = dealer.PartsPhone.replace(/\s/g, '');
            }

            if (dealer.ServicePhone) {
                dealer.ServicePhone = dealer.ServicePhone.replace(/\s/g, '');
            }
            
            var urlPattern = /^((http|https):\/\/)/;
          
			if (dealer.PrimaryURL) {
				dealer.PrimaryURL = urlPattern.test(dealer.PrimaryURL) ? dealer.PrimaryURL : 'http://' + dealer.PrimaryURL;
			} else if (dealer.PrimaryURL == 'http://-') {
			    dealer.PrimaryURL = '';
			}
          
			if (dealer.ServiceURL) {
				dealer.ServiceURL = urlPattern.test(dealer.ServiceURL) ? dealer.ServiceURL : 'http://' + dealer.ServiceURL;
			} else if (dealer.ServiceURL == 'http://-') {
                dealer.ServiceURL = '';
            }
          
			if (filters) {
				for (i = 0; i < filters.length; i++) {
					if (dealer[filters[i].option] == 1) {
						services.push(filters[i].display);
					}
				}
				if (services.length) {
					dealer.serviceList = services.join(', ');
				}
			}

			dealer.formattedAddress = AddressService.formatAddress(dealer, ConfigService.getConfig().dealerItemAddressFormat);

			dealer.isEnableSEOfriendly  = ladSEOfriendly.readConfig();
			dealer.baseHrefValue        = false;
			dealer.formattedAddressPath = false;

			if (dealer.isEnableSEOfriendly) {
				dealer.baseHrefValue = ladSEOfriendly.createPath(ladSEOfriendly.readConfig('baseHrefKeys'));
				var dataAddress      = ladSEOfriendly.readConfig('addressForURLfriendly');
				if (dataAddress && dataAddress !== '') {
					dealer.formattedAddressPath = AddressService.joinAddress(dealer, dataAddress, true);
				} else {
					dealer.formattedAddressPath = AddressService.joinAddress(dealer, ConfigService.getConfig().dealerItemAddressFormat);
				}
			}

			var $scope = $rootScope.$new(false);
			$scope.dealer = dealer;
			$scope.config = config;
			$scope.params = params;
			$scope.callDealer = callDealer;
			$scope.getDirections = getDirections;
			$scope.dealerWebsite = dealerWebsite;

			var html = $compile(itemDirective)($scope);

			$scope.$apply();

			dealer.infoWindowMarkup = html[0].outerHTML;
		};

		api.checkService = function(dealer, service) {
			if(dealer && service) {
				if(service.indexOf('_OR_') === -1 && service.indexOf('_AND_') === -1) {
					if(service.indexOf('!') === 0) {
						return !dealer[service.slice(1)];
					} else {
						return dealer[service];
					}
				} else {
					if(service.indexOf('_OR_') > -1) {
						return service.split('_OR_').reduce(function(prev, curr) {
							if(curr.indexOf('!') === 0) {
								return dealer[curr.slice(1)] != '1' || prev; 
							} else 
							{
								return dealer[curr] == '1' || prev; 
							}
						}, false);
					}
					if(service.indexOf('_AND_') > -1) {
						return service.split('_AND_').reduce(function(prev, curr) {
							if(curr.indexOf('!') === 0) {
								return dealer[curr.slice(1)] != '1' && prev;
							} else {
								return dealer[curr] == '1' && prev; 
							}
						}, true);
					}
				}
			}
		};
		
		api.commaSeparatedServices = function(dealer, services) {
			var servicesArr=[]; 
			if(dealer && services) {
				for (var i = 0; i < services.length; i++) {
					if(api.checkService(dealer,services[i].option)) {
						servicesArr.push(services[i].display);
					}
				}
			}
			
			return servicesArr.join(', ');
		};
		
		return api;
	}
});

define('dealerlocator/services/DeviceService',[
        'angular', 
        'dealerlocator/dealerlocator.app'], 
    function (angular, app,GLOBAL_CONF) {
	

    app.factory('DeviceService', DeviceService);

    function DeviceService() {
        var api = {};

        api.get = function() {
            return 'pc';
        };
        
        return api;
    }

});



define('dealerlocator/services/EncodingService',[
        'angular', 
        'dealerlocator/dealerlocator.app'], 
    function (angular, app) {


    app.factory('EncodingService', EncodingService);

    function EncodingService() {
        var api = {};

        api.encodeSlash = function(uri) {
            // angular cannot use '/' in routing, have to encode it for it to work
            // when search params is undefined do not encode
            if(typeof uri !== 'undefined'){
                return uri.replace(/\//g, '%252F').replace(/%2F/gi, '%252F');
            } else {
                return uri;
            }
        };

        api.decodeSlash = function(uri) {
            return uri.replace(/%2F/gi, "/");
        };

        api.encodeMapCharacters = function(uri) {
            // uri.replace(/\//g, '%252F').replace(/%2F/gi, '%252F'); // for /
            // uri.replace(/\&/g, '%2526').replace(/%26/gi, '%2526'); // for &
            // uri.replace(/\'/g, '%2527').replace(/%27/gi, '%2527'); // for '
            var url;
            // REPLACING & ' and + WITH URL ENCODING 
            url = uri.replace(/\&/g, '%26').replace(/\'/g, '%5C%27').replace(/\+/g, '%2B');
            return url;
        };

        return api;
    }

});



define('dealerlocator/services/PremiumService',[
        'angular', 
        'dealerlocator/dealerlocator.app'], 
    function (angular, app) {
	

    app.factory('PremiumService', PremiumService);

    function PremiumService() {
        var api = {};

        api.check = function() {
            var s = document.referrer.toLowerCase();
            return (s.indexOf("mustang") > -1 || s.indexOf("n=00s") > -1) ||
                (s.indexOf("vignale") > -1);
        };
        
        return api;
    }

});



define('dealerlocator/services/TimeService', [
    'angular',
    'dealerlocator/dealerlocator.app'],
  function (angular, app) {


    app.factory('TimeService', TimeService);

    function TimeService() {
      var api = {};

      api.formatTime = function (time, config) {
        var hours,
          formattedTime;
        if (time.length < 4) {
          time = 0 + time;
        }

        if (config.hours12 && config.hours12 === "true") {
          hours = time.substr(0, 2);
          var am = "AM";
          var pm = "PM";
          if (config.hoursAM) {
            am = config.hoursAM;
          }
          if (config.hoursPM) {
            pm = config.hoursPM;
          }
          if (hours > 12) {
            formattedTime = (hours - 12) + ':' + time.substr(2, 2) + pm;
          } else {
            formattedTime = +time.substr(0, 2) + ':' + time.substr(2, 2) + am;
          }
          switch (+hours) {
            case (12):
              formattedTime = hours + ':' + time.substr(2, 2) + pm;
              break;
            case (0):
              formattedTime = (+hours + 12) + ':' + time.substr(2, 2) + am;
              break;
            case (24):
              formattedTime = (hours - 12) + ':' + time.substr(2, 2) + am;
              break;
          }
          return formattedTime;
        } else {
          hours = time.substr(0, 2);
          formattedTime = hours + ':' + time.substr(2, 2);
          return formattedTime;
        }
      };

      return api;
    }

  }
);



define('dealerlocator/controllers/MainController', [
		'angular'
		, 'angular-route'
        , 'dealerlocator/dealerlocator.app'
		, 'jquery'
		, 'common'
		, 'analytics/analyticsEventLayer'
        , 'ie-detect'
    ]
    , function (angular, ngRoute, app, $, common, analyticsEventLayer, ieDetect) {

        app.controller('MainController', ['$scope', '$rootScope', '$routeParams', '$timeout', 'ApiService', 'ConfigService', 'PremiumService', 'DeviceService', 'LastSearchService', 'GLOBAL_CONF', 'DL_SERVICE', MainController]);

        function MainController($scope, $rootScope, $routeParams, $timeout, ApiService, ConfigService, PremiumService, DeviceService, LastSearchService, GLOBAL_CONF, DL_SERVICE) {
            var imagePath = '/etc/designs/guxfoap/clientlibs/guxfoap-dealerlocator/img/dealerlocator/'
                , polygon = DL_SERVICE.polygon.split('%2C')
                , desktopDisplayPolygon = DL_SERVICE.desktopDisplayPolygon ? DL_SERVICE.desktopDisplayPolygon.split('%2C') : null
                , mobileDisplayPolygon = DL_SERVICE.mobileDisplayPolygon ? DL_SERVICE.mobileDisplayPolygon.split('%2C') : null
                , boundsArray = []
                , displayBounds = []
                , i;

            $scope.isBrazil = function(){
                return (GLOBAL_CONF.iso3MarketCode === 'BRA');
            }

            $scope.sizeElements = function (time) {
                var mapHeight
                    , headerHeight
                    , searchFieldHeight
                    , resultsTop
                    , searchResultsHeight
                    , searchResultsHeaders
                    , setTime
                    , bottomGap;

                if(time) {
                    setTime = time;
                } else {
                    setTime = 500;
                }

                $timeout(function () {
                    if ($scope.desktop.matches || ieDetect.isIE() < 9) {
                        headerHeight = $('header.global').height() || $('#globile_header').height();
                        const isFDSEnabled = $('#dealer-locator').attr('data-enableFds');
                        //mapHeight = $(window).height() - headerHeight;
                        //if(mapHeight < 630) {
                        //	mapHeight = 630;
                        //} else {
                        //	if(mapHeight > 768) {
                        //		mapHeight = 768;
                        //	}
                        //}
                        //$('#map').height(mapHeight);

                        if ($(window).width() >= 768 && $(window).width() < 1200) {
                            mapHeight = 768;
                            bottomGap = 60;
                        }
                        if ($(window).width() >= 1200) {
                            mapHeight = isFDSEnabled !=undefined ? 768 : 1260;
                            bottomGap = 140;
                        }

                        searchFieldHeight = $('.dl-search').height();
                        searchResultsHeaders = $('.dl-results-header').height();

                        // search box -top: 20
                        // gap between search box and results: 15

                        searchResultsHeight = mapHeight - searchFieldHeight - bottomGap - searchResultsHeaders - 20 - 15;

                        $('.dl-results-list, .filters').height(searchResultsHeight);

                        if ($('.dl-results-list .row.result').length === 1) {
                            $('.dl-results-list, .filters').height($('.dl-results-list .row.result').outerHeight());
                        }
                        const topValue = isFDSEnabled ? searchFieldHeight : searchFieldHeight + 35;
                        $('.dl-results').css({
                            'top': topValue
                            , 'maxHeight': mapHeight - searchFieldHeight - bottomGap - 20 - 15
                        });
                        $('.dl-results-container').css('minHeight', 0);
                    } else {
                        $('#map').height(162);
                        $('.dl-results-list').height('auto');
                        $('.dl-results').css({
                            'top': 0
                            , 'maxHeight': 'none'
                        });

                        $('.filters').height('auto');
                        $scope.dealerlocator.resultsVisible = true;
                        $scope.dealerlocator.resultsAlwaysVisible = true;
                    }
                    $scope.dealerlocator.map.trigger($scope.dealerlocator.map.map, 'resize');
                }, setTime);
            };

            $scope.countNonHighlightedFilters = function (category) {
                var nonHighlightedLength = category.filters.filter(function (el) {
                    return !el.highlighted;
                }).length;
                return nonHighlightedLength;
            };

            $scope.updateFilters = function (e) {
                if (e) {
                    e.preventDefault();
                }
                $scope.dealerlocator.showDlResultsFilter = true;
                $scope.dealerlocator.isSearchEnabled = true;
                $scope.dealerlocator.fromFilter = true;
                //analyticsEventLayer.getDealerLocatorEvents().trackAdvancedSearch();
                $scope.$broadcast('filters-updated');
            };

            $scope.updateSearchField = function (search) {
                $scope.$broadcast('search-updated', search);
            };

            $scope.clearFilters = function ($event) {
                var props;

                for (var i = 0; i < $scope.config.filters.length; i++) {
                    $scope.config.filters[i].selected = false;
                }

                $scope.dealerlocator.filtersUpdated = false;
                $scope.sizeElements();

                props = {
                    deviceType: DeviceService.get()
                , };

                if ($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
                    props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
                }

                if ($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
                    props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
                }

                if ($event) {
                    $event.preventDefault();
                }
            };

            $scope.showDlResults = function () {
                var test = false;
                if ((typeof $scope.dealerlocator.dealers != 'undefined' && $scope.dealerlocator.dealers.length > 0) || $scope.dealerlocator.showDlResultsFilter || $scope.dealerlocator.dealer) {
                    test = true;
                }
                return test;
            };

            $scope.showFilterTooltip = function (filter) {
                var i
                    , props;

                if (filter.showTooltip) {
                    for (i = 0; i < $scope.config.filters.length; i++) {
                        $scope.config.filters[i].showTooltip = false;
                    }
                } else {
                    for (i = 0; i < $scope.config.filters.length; i++) {
                        $scope.config.filters[i].showTooltip = false;
                    }
                    filter.showTooltip = true;
                }

                props = {
                    deviceType: DeviceService.get()
                    , dealerFilterType: 'services'
                    , facetSelection: filter.option
                };

                if ($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
                    props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
                }

                if ($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
                    props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
                }
            };

            $scope.toggleFilters = function (e) {
                const isFDSEnabled = $('#dealer-locator').attr('data-enableFds');
                $scope.sizeElements();

                if (typeof $scope.dealerlocator.totalDealers != 'undefined' && $scope.dealerlocator.totalDealers.length === 0) {
                    $scope.dealerlocator.resultsVisible = true;
                    $scope.dealerlocator.resultsAlwaysVisible = true;
                    if (isFDSEnabled != undefined) {
                        $scope.filterSettings.hidden = true;
                    }
                } else {
                    if ($scope.filterSettings.hidden) {
                        $scope.trackOpeningFilters();
                    }
                    $scope.filterSettings.hidden = !$scope.filterSettings.hidden;
                    if (isFDSEnabled != undefined) {
                        if($scope.filterSettings.hidden) {
                            const y = document.querySelector(".dl-results").getBoundingClientRect().top + window.scrollY - 50;
                            window.scroll({top: y, behavior: 'smooth'});
                        }
                    }
                }

                var props = {
                    deviceType: DeviceService.get()
                , };

                if ($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
                    props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
                }
                if ($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
                    props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
                }

                if (e) {
                    e.preventDefault();
                }
            };

            $scope.collectData = function () {
                return {
                    searchType: $scope.dealerlocator.currentSearchType
                    , searchTerm: $scope.params.searchParam
                    , totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : ''
                    , distance: $scope.filter.distance
                };
            };

            $scope.collectDataWithFilters = function () {
                var data = $scope.collectData()
                    , analyticsFilters;

                selectedFilters = _.filter($scope.config.filters, function (filter) {
                    return !!filter.selected;
                });

                analyticsFilters = _.map(selectedFilters, function (filter) {
                    return 'Services:' + filter.displayFilter;
                });

                data.filters = analyticsFilters;
                return data;
            };

            $scope.trackOpeningFilters = function () {
                var data = $scope.collectData();
            };

            $scope.trackError = function (errorReason) {
                var data = $scope.collectDataWithFilters();
                data.errorReason = errorReason;
                data.miniDealer = false;
                analyticsEventLayer.getCommonDealerLocatorEvents().trackError(data);
            };

            $scope.trackDealerActionClick = function (directions, dealerID, viewType) {
                var data = $scope.collectDataWithFilters();
                data.directionsClicked = directions;
                data.dealerID = dealerID;
                data.viewType = viewType;
                data.miniDealer = false;
                analyticsEventLayer.getCommonDealerLocatorEvents().trackDealerActionClick(data);
            };

            $scope.callDealer = function (dealer, placement, index) {
                // Only for analytics at the moment. Call is handled by href
                var props = {
                    contactType: "c2c"
                    , dealerCode: dealer.DealerID.toLowerCase()
                    , position: index ? index + 1 : 1
                    , totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1
                    , radius: $scope.filter.distance
                    , deviceType: DeviceService.get()
                    , ctaPlacement: placement
                };

                if ($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
                    props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
                }

                if ($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
                    props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
                }
                analyticsEventLayer.getCommonDealerLocatorEvents().trackInitiateContactFullDealerLocator(dealer.DealerID);
            };

            $scope.getDirections = function (dealer, placement, index) {
                // Only for analytics at the moment. Directions are handled by API
                var props = {
                    dealerCode: dealer.DealerID.toLowerCase()
                    , position: index ? index + 1 : 1
                    , totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1
                    , radius: $scope.filter.distance
                    , deviceType: DeviceService.get()
                    , ctaPlacement: placement
                };

                if ($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
                    props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
                }

                if ($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
                    props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
                }

                $scope.trackDealerActionClick(true, dealer.DealerID, 'list view');
            };

            $scope.dealerWebsite = function (dealer, placement, index) {
                // Only for analytics at the moment. Call is handled by href
                var props = {
                    dealerCode: dealer.DealerID.toLowerCase()
                    , position: index ? index + 1 : 1
                    , totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1
                    , radius: $scope.filter.distance
                    , deviceType: DeviceService.get()
                    , ctaPlacement: placement
                };

                if ($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
                    props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
                }

                if ($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
                    props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
                }

                $scope.trackDealerActionClick(false, dealer.DealerID, 'list view');
            };

            $scope.showResultsBlock = function () {
                $scope.dealerlocator.resultsAlwaysVisible = true;
                $scope.dealerlocator.resultsVisible = true;
                if (typeof $scope.dealerlocator.map.selectedMarker != "undefined") {
                    $scope.dealerlocator.map.selectedMarker.hideInfowindow();
                }
                $scope.$apply();
            };

            $scope.params = $routeParams;
            $scope.config = ConfigService.getConfig();
            $scope.filter = {};
            $scope.filter.distance = $scope.config.distance.defaultDistance;

            preSelectFilters();

            // These are intentionally not using mediaQuery module as the definitions of desktop etc were
            // different when dealer locator was built and don't correspond to the definitions in mediaQuery.
            $scope.desktop = window.matchMedia('(min-width: 768px)');
            $scope.mobileAndTablet = window.matchMedia('(max-width: 991px)');

            for (i = 0; i < polygon.length; i++) {
                boundsArray.push({
                    lat: polygon[i].split('+')[1]
                    , lng: polygon[i].split('+')[0]
                });
            }

            var serviceURL;
            /* TODO - commented out as it generates a 400 browser error.
             * Might be removed as part of refactoring the Dealer Locator functionality
             */
            // if(location.pathname.indexOf('html') != -1) {
            // 	serviceURL = location.pathname.replace('.html', '.dealerlocatorautocomplete.autoCompleteDealers.json');
            // } else {
            // 	serviceURL = location.pathname + '.dealerlocatorautocomplete.autoCompleteDealers.json';
            // }

            $scope.api = new ApiService({
                language: GLOBAL_CONF.localeLowerHyphenUpper
                , countryCode: GLOBAL_CONF.marketCode
                , countryCodes: DL_SERVICE.countryCodes
                , imagePath: imagePath
                , countryBounds: boundsArray
                , autocompleteCallbackURL: serviceURL
                , autocompleteCallbackName: 'autoCompleteDealers'
            });

            $scope.dealerlocator = {};
            $scope.dealerlocator.errorMessage = null;
            $scope.dealerlocator.displaySplash = false;
            $scope.dealerlocator.searchType = ($scope.isBrazil() ? LastSearchService.searchTypeValue('location') : ( LastSearchService.searchTypeValue('location') === 'dealername' ? 'location' : LastSearchService.searchTypeValue('location')));
            $scope.searchInput = LastSearchService.searchInputValue('');
            $scope.dealerlocator.searchTypePlaceholders = {};
            $scope.dealerlocator.searchTypePlaceholders.location = $('#search-type-location').attr('data-placeholder');
            $scope.dealerlocator.searchTypePlaceholders.dealername = $('#search-type-dealername').attr('data-placeholder');
            addressFormat = $scope.config.addressformat.split(',');
            $scope.dealerlocator.addressFormat = addressFormat;
            $scope.dealerlocator.showAdvancedSearch = true;
            $scope.dealerlocator.showFilterSearch = true; //set always true
            //This is checking to cater for Hide filter on page load
            if(DL_SERVICE.hideFilter && DL_SERVICE.hideFilter === "true") {
                $scope.dealerlocator.showFilterSearch = false;
            }
            //This checking is cater for VN market specific
            if (GLOBAL_CONF.marketCode === 'VN') {
                $scope.dealerlocator.map = new $scope.api.map(document.getElementById('map'), {
                    disableBusinessPOI: false
                });
                $scope.dealerlocator.map.map.setOptions({
                    styles: [
                        {
                            "featureType": "poi",
                            "elementType": "labels",
                            "stylers": [
                                { "visibility": "off" }
                            ]
                        },{
                            "featureType": "poi.attraction",
                            "stylers": [
                                { "visibility": "on" }
                            ]
                        },{
                            "featureType": "poi.government",
                            "stylers": [
                                { "visibility": "on" }
                            ]
                        },{
                            "featureType": "poi.medical",
                            "stylers": [
                                { "visibility": "on" }
                            ]
                        },{
                            "featureType": "poi.park",
                            "stylers": [
                                { "visibility": "on" }
                            ]
                        },{
                            "featureType": "poi.place_of_worship",
                            "stylers": [
                                { "visibility": "on" }
                            ]
                        },{
                            "featureType": "poi.school",
                            "stylers": [
                                { "visibility": "on" }
                            ]
                        },{
                            "featureType": "poi.sports_complex",
                            "stylers": [
                                { "visibility": "on" }
                            ]
                        },{
                            "featureType": "water",
                            "elementType": "geometry",
                            "stylers": [
                                { "invert_lightness": true},
                                { "visibility": "simplified"},
                                { "color": "#97a1e8"}
                            ]
                        },{
                            "featureType": "water",
                            "elementType": "labels",
                            "stylers": [
                                { "visibility": "simplified"},
                                { "invert_lightness": true},
                                { "color": "#97a1e8"}
                            ]
                        }
                    ]
                });
            } else {
                $scope.dealerlocator.map = new $scope.api.map(document.getElementById('map'), {
                    disableBusinessPOI: true
                });
            }

            if (($scope.desktop.matches && desktopDisplayPolygon) || (ieDetect.isIE() < 9 && desktopDisplayPolygon)) {
                for (i = 0; i < desktopDisplayPolygon.length; i++) {
                    displayBounds.push({
                        lat: desktopDisplayPolygon[i].split('+')[1]
                        , lng: desktopDisplayPolygon[i].split('+')[0]
                    });
                }
            }

            if ((!$scope.desktop.matches && mobileDisplayPolygon) || (!ieDetect.isIE() && mobileDisplayPolygon)) {
                for (i = 0; i < mobileDisplayPolygon.length; i++) {
                    displayBounds.push({
                        lat: mobileDisplayPolygon[i].split('+')[1]
                        , lng: mobileDisplayPolygon[i].split('+')[0]
                    });
                }
            }


            if (displayBounds.length > 0) {
                $scope.sizeElements();
                $scope.dealerlocator.map.setBounds(displayBounds);
            } else {
                $scope.dealerlocator.map.setBounds(boundsArray);
            }

            $scope.dealerlocator.map.addListener($scope.dealerlocator.map.map, 'click', function (e) {
                $scope.dealerlocator.clearAutocomplete();
                $scope.dealerlocator.resultsVisible = false;
                $scope.dealerlocator.resultsAlwaysVisible = false;

                $scope.$apply();
            });


            $scope.dealerlocator.map.addListener($scope.dealerlocator.map.map, 'dragstart', function (e) {
                $scope.dealerlocator.clearAutocomplete();
                $scope.dealerlocator.resultsVisible = true;
                $scope.dealerlocator.resultsAlwaysVisible = true;
                $scope.$apply();
            });

            $scope.dealerlocator.map.addListener($scope.dealerlocator.map.map, 'dragexit', function (e) {
                $scope.dealerlocator.resultsVisible = false;
                $scope.dealerlocator.resultsAlwaysVisible = false;
                $scope.$apply();
            });


            $scope.dealerlocator.map.addListener($scope.dealerlocator.map.map, 'idle', function (e) {
                $('#map').find('a[href*="google"]').attr("tabindex", "-1"); // remove Google links from tabindex order
            });


            $scope.dealerlocator.resultsVisible = true;
            $scope.dealerlocator.resultsAlwaysVisible = true;

            $scope.filterSettings = {};
            $scope.filterSettings.hidden = true;

            $scope.filters = {};
            $scope.offset = $scope.desktop.matches || ieDetect.isIE() < 9 ? $('.dl-search').width() * -0.5 : null;

            $scope.page = 0;

            $scope.dealerlocator.suggestions = {};

            $scope.desktop.addListener(function (media) {
                    if (media.matches) {
                        $scope.offset = $('.dl-search').width() * -0.5;
                    } else {
                        $scope.offset = null;
                    }
                });

            $(window).on('resize', function () {
                $scope.sizeElements();
                $scope.$apply();
            });

            $scope.sizeElements();

            $('.loading').removeClass('loading');

            function preSelectFilters() {
                var parametersString
                    , parametersArr
                    , filters
                    , distance
                    , i;
                parametersString = location.search.substring(1);
                parametersArr = parametersString.split('&');
                for (var i = 0; i < parametersArr.length; i++) {
                    if (parametersArr[i].split('=')[0]) {
                        if (parametersArr[i].split('=')[0] === 'filters') {
                            filters = parametersArr[i].split('=')[1].split('|');
                        }
                        if (parametersArr[i].split('=')[0] === 'distance') {
                            distance = parametersArr[i].split('=')[1];
                        }
                    }
                }

                if (filters) {
                    for (var i = 0; i < filters.length; i++) {
                        if ($scope.config.services[filters[i]]) {
                            $scope.config.services[filters[i]].selected = true;
                        }
                    }
                }

                if (distance) {
                    for (var i = 0; i < $scope.config.distance.distanceOptions.length; i++) {
                        if (distance === $scope.config.distance.distanceOptions[i].key) {
                            $scope.filter.distance = distance;
                        }
                    }
                }
            }

            function toggleDropdown() {
                $('.dl-heading').on('click', function (e) {
                    e.preventDefault();
                    if ($(this).closest('.dropdown-search').length) {
                        $(this).toggleClass('active').siblings('.dl-search-dropdown').toggleClass('open');
                        $scope.sizeElements(200);
                    }
                });
            }

            toggleDropdown();

        }

    });

define('dealerlocator/controllers/DealerSearchController', [
		'angular',
		'dealerlocator/dealerlocator.app',
		'jquery',
		'common',
		'ie-detect',
		'cookie-LAD',
		'mediaQuery',
		'analytics/analyticsEventLayer'],
	function (angular, app, $, common, ieDetect, cookieLAD, mediaQuery, analyticsEventLayer) {



	app.controller('DealerSearchController', ['$scope', '$location', '$window', '$timeout', '$q', '$routeParams', 'ConfigService', 'DeviceService', 'EncodingService', 'DealerService', 'LastSearchService', '$http', 'GLOBAL_CONF', DealerSearchController]);

	function DealerSearchController($scope, $location, $window, $timeout, $q, $routeParams, ConfigService, DeviceService, EncodingService, DealerService, LastSearchService, $http, GLOBAL_CONF) {
		var currentLocationTimeout,
			dl               = $scope.dealerlocator,
			searchField      = $('#search-field'),
			regionDropDown   = $('#select-region'),
			provinceDropDown = $('#select-province'),
			selectConfig     = {
				enable: true,
				minimumResultsForSearch: -1,
				blurOnChange: false,
				selectOnBlur: false,
				loadMorePadding: 0,
				closeOnSelect: true,
				openOnEnter: true,
				containerCss: {},
				dropdownCss: {},
				containerCssClass: "",
				dropdownCssClass: "",
				allowClear: true
			},
			focusAutoComplete = false;

		$scope.enableGeoBtn   = true;
		$scope.enableDropdown = false;
		$scope.singleDropdown = false;
		$scope.showAutocompleteDealerName = false;
		$scope.searchFilterDealerName = '';
		$scope.countryList    = ["THA", "BRA" ];
		$scope.nzMarketList = ["NZL"]; //New Zealand

		if ($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.countryList) > -1) {
			if (GLOBAL_CONF.iso3MarketCode === "THA") {
				$scope.enableDropdown = true;

				$('.dl-search .dl-heading').addClass('active').siblings('.dl-search-dropdown').addClass('open');
			}
		}

		$scope.filterDealerAutocomplete = function (val) {
			return function (item) {
			  if (!val || val.length < 3) return
			  //todo remove indexOF, add something else method, not support IE8
			  var isExist = ~item.dealerName.toLowerCase().indexOf(val.toLowerCase());
			  if (isExist) {
				$scope.showAutocompleteDealerName = true
			  }

			  return ~item.dealerName.toLowerCase().indexOf(val.toLowerCase());
			}
		  };

		$scope.autocompleteHandler = function (searchQuery, event) {
			$scope.showAutocompleteDealerName = false;
			$scope.searchInput = searchQuery;
			$scope.search(event);
		}

		//For IE 8
		var searchInput2 = document.getElementById('search-field');
		if (ieDetect.isIE() && ieDetect.isIE() < 10) {

			(function ($) {
				$.support.placeholder = ('placeholder' in document.createElement('input'));
			})(jQuery);

			//fix for IE7 and IE8
			$(function () {
					var element = document.getElementById("search-field");
					element.addEventListener("focus", function( event ) {
						if ($(this).val() == $(this).attr("placeholder")) {
							$(this).val("");
							$(this).removeClass('cusPlaceholder');
						}
					}, true);
					element.addEventListener("blur", function( event ) {
						if ($(this).val() == ""){
							$(this).val($(this).attr("placeholder"));
							$(this).addClass('cusPlaceholder');
						}
					}, true);
					$(".input-field [placeholder]").blur(function () {
						if ($(this).val() == ""){
							$(this).val($(this).attr("placeholder"));
							$(this).addClass('cusPlaceholder');
						}
					}).blur();
			});
			if (window.location.hash) {
				var parts,
					hashVal = decodeURI(window.location.hash);
				// console.log(hashVal);

				if (hashVal.indexOf(':') < 0) {
					if(hashVal.indexOf('dealer') >= 0){
						parts = hashVal.split('/');
						// console.log(parts[2] +', '+ parts[4]);
						searchField.val(parts[2]);
						// $scope.dealerlocator.fromFilter=true;
						// $scope.dealerSearch(EncodingService.encodeSlash(parts[4]));
					} else if (hashVal.indexOf('search') >= 0) {
						parts = hashVal.split('/');
						// console.log(parts[2]);
						searchField.val(parts[2]);
						// $('#search-form .search-submit').trigger('click');
					}
				}
			}
			searchInput2.onkeyup = function() {
				$scope.autocomplete();
			};
		}

		$scope.search = function(e) {
			dl.isSearchEnabled =true;
			clearTimeout(dl.map.autocompleteTimeout);
			if(e) {
				e.preventDefault();
			}
			
			if (ieDetect.isIE() && ieDetect.isIE() < 9) {
				$scope.searchInput = searchInput2.value;
			}

			if($scope.searchInput.length > 0) {
				$scope.dealerlocator.fromFilter=true;
				var searchInputEncoded = EncodingService.encodeSlash($scope.searchInput),
					searchInputType = '';

				// if on mobile/tablet, blur the text input to get rid of the keyboard on screen
				if (mediaQuery.getMediaType() !== 'desktop') {
					 $timeout(function() {
						 searchField.blur();
					}, 0, false);
				}
				
				$('#dealer-locator .dd-loading').hide();

				dl.suggestions = null;
				dl.disambiguationLatLng = null;
				if (searchInputEncoded.indexOf('%') !== -1) {
					$scope.dealerlocator.searchLoading = false;
					$scope.dealerlocator.errorMessage = $('.error-no-results').text();
				} else {
					$location.path('/search/' + searchInputEncoded);
					LastSearchService.set($scope.searchInput, dl.searchType);
					$scope.sizeElements();
				}
			} else {
				$('#dealer-locator .dd-loading').hide();
				dl.errorMessage = $('.error-empty-search').text();
				$scope.sizeElements();

				var props = {
					errorType: 'empty entry',
					radius: $scope.filter.distance,
					deviceType: DeviceService.get()
				};

				if(dl.searchType === 'location') {
					dl.currentSearchType = 'location';
					props.location = '';
				}
				if(dl.searchType === 'dealername') {
					dl.currentSearchType = 'dealer name';
					props.namesearchTerm = '';
				}
				props.searchSelection = dl.currentSearchType;
				$scope.trackError('no entry');
			}
		};

		$scope.searchDropDown = function(e) {
            dl.isSearchEnabled =true;
            clearTimeout(dl.map.autocompleteTimeout);
            if(e) {
                e.preventDefault();
            }

            dl.searchType = "dropdown";
            if($scope.searchInput) {
                $scope.dealerlocator.fromFilter=true;
                var searchInputEncoded = EncodingService.encodeSlash($scope.searchInput),
                    searchInputType = '';

                // if on mobile/tablet, blur the text input to get rid of the keyboard on screen
                if (mediaQuery.getMediaType() !== 'desktop') {
                     $timeout(function() {
                         searchField.blur();
                    }, 0, false);
                }

                dl.suggestions = null;
                dl.disambiguationLatLng = null;
                $location.path('/search/' + searchInputEncoded);
                LastSearchService.set($scope.searchInput, dl.searchType);
				$scope.sizeElements();
			}

			analyticsEventLayer.getDealerLocatorEvents().trackInitSearch({'usingCurrentLocation': false});
        };

		$scope.$on('$routeChangeStart', function(e, next, current) {
			if(next) {
				$scope.searchInput = next.pathParams.searchParam;
				dl.errorMessage = null;
			}
		});

		$scope.$on('search-updated', function(e, data) {
			$scope.searchInput = data;
		});

		$scope.$on('filters-updated', function() {
			if(!$routeParams.searchParam) {
				$scope.search();
			}
		});

		$scope.locationSearch = function(location, e) {
			dl.suggestions = null;
			$scope.sizeElements();
			dl.disambiguationLatLng = null;
			$location.path('/search/' + location);
			LastSearchService.set(location, dl.searchType);
			if(e) {
				e.preventDefault();
			}
			$scope.sizeElements();
		};

		$scope.dealerSearch = function(dealerID, e) {
			dl.suggestions = null;
			dl.disambiguationLatLng = null;
			$location.path('/dealer/' + dealerID);
			LastSearchService.set(dealerID , dl.searchType);
			if(e) {
				e.preventDefault();
			}
			$scope.sizeElements();
		};

		$scope.disambigSearch = function(disambiguation, e) {
			dl.isSearchEnabled=true;
			dl.suggestions = null;
			$scope.sizeElements();
			$location.path('/search/' + disambiguation.description);
			dl.disambiguationLatLng = {
                address_components: disambiguation.address_components,
                description: disambiguation.description,
                lat: disambiguation.lat,
                lng: disambiguation.lng,
                types: disambiguation.types
            };
			if(e) {
				e.preventDefault();
			}
			$scope.sizeElements();
		};

		$scope.clearAutocomplete = dl.clearAutocomplete = function (){
			dl.suggestions = {
					dealers: [],
					locations: []
				};
				$scope.sizeElements();
		};

		$scope.searchTypeChange = function() {
			if (dl.searchType === 'dealername'){
				dl.myCurrentLocationVisible = false;
				dl.searchByName = true;
			} else {
				dl.myCurrentLocationVisible = true;
				dl.searchByName = false;
			}

			$scope.searchInput = '';
			$scope.clearAutocomplete();
		};

		$scope.selectProvince = function () {
			if ($scope.singleDropdown) {
				setTimeout(function () {
					if (regionDropDown.val() === '') {
						$('.dl-search-dropdown .region-error').removeClass('hide');
					} else {
						$('.dl-search-dropdown .region-error').addClass('hide');
					}
				}, 150);
				return;
			}
			regionDropDown.on("select2-selecting", function (e) {
				if (e.val != "") {
				    $('#dealer-locator .dd-loading').show();
				    $(this).closest('.form-group-input').find('.error').addClass('hide');
					$scope.loadProvince(e.val);
				} else {
				    $(this).closest('.form-group-input').find('.error').removeClass('hide');
					$scope.destroyProvinceDDL(provinceDropDown);
					provinceDropDown.select2(selectConfig);
				}
			});
		};
		if(regionDropDown.length){
			$scope.selectProvince();
		}
		
		
		$scope.loadProvince = function (region, setState) {
			$scope.destroyProvinceDDL(provinceDropDown);
			var arrayList = $scope.dealerLocation[region];
			arrayList.sort();

			$.each(arrayList, function(key, value) {
			    provinceDropDown.append($("<option></option>").val(value).html(value));
            });
			provinceDropDown.select2(selectConfig);
			if (typeof setState != 'undefined' && setState != false) {
				provinceDropDown.select2("val", setState);
			}
			$('#dealer-locator .dd-loading').hide();
		};

		$scope.destroyProvinceDDL = function (ele) {
		    var option = ele.find("option:eq(0)");
			ele.select2('destroy').removeAttr('disabled').find('option').remove();
			ele.empty().append(option);
		};

		$scope.dropdownSearch = function () {
			provinceDropDown.on('select2-selecting', function (e) {
				e.preventDefault();
				$scope.hideDropdown();
				if (e.val != '') {
					$(this).closest('.form-dropdown').find('.error').addClass('hide');
					$scope.searchInput = e.val +":"+ regionDropDown.val();
					$scope.provinceSetLabel(e.val);
					$scope.searchDropDown(e);
					$scope.$apply();
				} else {
					$(this).closest('.form-dropdown').find('.error').removeClass('hide');
					$scope.provinceSetLabel(e.val);
				}
			});
		};
		if(provinceDropDown.length){
			$scope.dropdownSearch();
		}
		

		$scope.searchByRegion = function (e) {
			if(e) {
				e.preventDefault();
			}
			var regionValue = regionDropDown.val() || regionDropDown.select2("val");
			if (regionValue != '') {
				regionDropDown.closest('.form-dropdown').find('.error').addClass('hide');
				$scope.searchInput = "AdministrativeArea="+ regionValue;
				$scope.searchDropDown(e);
			} else {
				$(this).closest('.form-dropdown').find('.error').removeClass('hide');
			}
		};

		$scope.provinceSetLabel = function (label) {
			provinceDropDown.select2("val", label);
		};

		$scope.hideDropdown = function (label) {
			$('.select2-container').removeClass('select2-dropdown-open select2-container-active');
			$('.select2-drop, .select2-drop-mask').hide();
		};

		$scope.searchFieldBlur = function(e) {

			if(!focusAutoComplete && !$('.dealer-autocomplete-list li').find(':hover').length){
				$scope.clearAutocomplete();
			}

			currentLocationTimeout = $timeout(function() {
				dl.myCurrentLocationVisible = false;
			}, 200);

			$timeout(function () {
				$scope.showAutocompleteDealerName = false;
				$scope.searchFilterDealerName = '';
			}, 400);
		};

		$scope.searchFieldFocus = function() {
			focusAutoComplete = false;
			if (dl.searchType === 'location' && $scope.searchInput === ''){
				dl.myCurrentLocationVisible = true;
			}

			if (!$scope.desktop.matches || !ieDetect.isIE()) {
				var pos = $('.dl-search-type').offset();
				if (pos) {
					$('body').scrollTop(pos.top);
				}
			}
		};

		$scope.autocomplete = function() {
			if (dl.searchType === 'dealername') {
				//return;
			}
			if(GLOBAL_CONF.iso3MarketCode !== "BRA" )
			{
			 dl.searchType = 'location';
			}
			dl.myCurrentLocationVisible = false;
			$scope.showAutocompleteDealerName = false;
			$scope.searchFilterDealerName = $scope.searchInput;

            dl.currentSearchType = dl.searchType;

			if (ieDetect.isIE() && ieDetect.isIE() < 9) {
				$scope.searchInput = searchInput2.value;
			}

			if($scope.searchInput.length >= 3) {
				dl.showDlResultsFilter=false;
				if(dl.searchType === 'location') {
					dl.errorMessage = null;
					dl.map.autocomplete($scope.searchInput, 5, function(results) {
						if($scope.searchInput.length >= 3) {
							dl.suggestions = $scope.filterSameResult(results);
						}else {
							dl.suggestions = {
								dealers: [],
								locations: []
							};
						}
						$scope.$apply();
						$scope.sizeElements();
					}, 'locations');
				} else {
					if(dl.searchType === 'dealername') {
						dl.errorMessage = null;
						dl.map.autocomplete($scope.searchInput, 100, function(results) {
							if($scope.searchInput.length >= 3) {
								dl.suggestions = $scope.filterSameResult(results);
							} else {
								dl.suggestions = {
									dealers: [],
									locations: []
								};
							}
							$scope.$apply();
							$scope.sizeElements();
						}, 'dealers');
					}
				}
			}else if($scope.searchInput === ''){
				dl.myCurrentLocationVisible = true;
			} else {
				$scope.clearAutocomplete();
			}
		};

        //APR-5027 - there are same location return in result, remove the same location from result
		$scope.filterSameResult = function(results) {
		    var filterResult = [];
		    $.each(results.locations, function(key, value) {
		        if(jQuery.inArray(value, filterResult) > -1) {
                    delete results.locations[key];
		        } else {
		            filterResult.push(value);
		        }
		    });

		    return results;
		}

		$scope.useCurrentLocation = function(e) {
			if($scope.enableDropdown){ 
				$('#dealer-locator .dd-loading').show();

			}
			$timeout.cancel(currentLocationTimeout);
			dl.searchType = 'location';
			dl.currentSearchType = dl.searchType;
			dl.usingCurrentLocation = false;

			if($window.navigator.geolocation){
				$window.navigator.geolocation.getCurrentPosition(function(position) {
					dl.map.reverseGeocode({lat: position.coords.latitude, lng: position.coords.longitude}, function(data) {
						if(data) {
							$scope.searchInput = data;
							dl.usingCurrentLocation = true;
							$scope.search(e);
					    	$scope.$apply();
					    }
					    analyticsEventLayer.getDealerLocatorEvents().trackInitSearch({'usingCurrentLocation': true});
					});
				},
				function(error) {

					var props = {
						radius: $scope.filter.distance,
						searchSelection: dl.currentSearchType,
						deviceType: DeviceService.get()
					};

					switch(error.code) {
						case error.PERMISSION_DENIED:
							props.errorType = 'permission denied';
							dl.errorMessage = $('.error-permission-denied').text();
							break;
						case error.POSITION_UNAVAILABLE:
							props.errorType = 'position unavailable';
							dl.errorMessage = $('.error-position-unavailable').text();
							break;
						case error.TIMEOUT:
							props.errorType = 'timeout';
							dl.errorMessage = $('.error-timeout').text();
							break;
						case error.UNKNOWN_ERROR:
							props.errorType = 'unknown';
							dl.errorMessage = $('.error-unknown').text();
							break;
					}
				});
			}else{
				dl.errorMessage = $('.error-geolocation-not-supported').text();
				var props = {
						errorType: 'geolocation not supported',
						radius: $scope.filter.distance,
						searchSelection: dl.currentSearchType,
						deviceType: DeviceService.get()
					};
			}
			dl.myCurrentLocationVisible = false;
		};

        $scope.chrome = function() {
            //APR-4720
            /*var check = /chrom(e|ium)/.test(navigator.userAgent.toLowerCase());
            if(check) {
                return "ng-hide";
            } else {
                return "dl-use-location";
            }*/
            return "dl-use-location";
        };

		$scope.$watch(function() {
			return dl.myCurrentLocationVisible;
		}, function() {
			$scope.sizeElements();
		});

		$scope.searchProvinceState = function() {
		    var searchPromiseState = $q.defer();
		    //adding this to check and avoid duplicate call when searchInput has value
		    window.callingSearchProvinceState = true;

            if(!$scope.enableDropdown) {
                return false;
            }

            var filters = {
                CountryCode: GLOBAL_CONF.iso3MarketCode,
                Language: GLOBAL_CONF.languageCode
            };

            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.nzMarketList) > -1) {
                filters.Brand = "Ford";
                delete filters.Language;
            }

            searchPromiseState.promise.then(function() {
                // Don't need to do anything if search succeeds
            },
            function(reason) {

            });

            var dealerLoc = {};
			
			if (GLOBAL_CONF.iso3MarketCode === "THA") {
				if(localStorage.getItem("dealerLoc")) {
					var storedDealerLocation = JSON.parse(decodeURIComponent(localStorage.getItem("dealerLoc")));
				}
			}else{
				if(cookieLAD.getCookie("dealerLoc")) {
					var storedDealerLocation = JSON.parse(decodeURIComponent(cookieLAD.getCookie("dealerLoc")));
				}
			}
					
            if(storedDealerLocation) {
                //Adding decodeURIComponent to decode the cookie value
                $scope.dealerLocation = storedDealerLocation;
                var arrayList = [];
                $.each($scope.dealerLocation, function(key, value) {
                    arrayList.push(key);
                });
                arrayList.sort();
                $.each(arrayList, function(key, value) {
                    regionDropDown.append($("<option></option>").val(value).html(value));
                });
                window.callingSearchProvinceState = false;
                return false;
            }

            $timeout(function() {
                searchPromiseState.reject('');
                window.callingSearchProvinceState = false;
            }, 20000);
            $scope.dealerlocator.map.searchDealersByProperties(1000, function bindProvinceState(dealers) {
                searchPromiseState.resolve();
                window.callingSearchProvinceState = false;
                var arrayList = [];
                for (i = 0; i < dealers.length; i++) {
                    DealerService.processDealer(dealers[i], $scope.config, $scope.params, $scope.dealerLocator, $scope.$parent.callDealer, $scope.$parent.getDirections, $scope.$parent.dealerWebsite);
                    var key = dealers[i].AdministrativeArea;
                    if(!dealerLoc[key]) {
                        var value = [];
                        value.push(dealers[i].Locality);
                        dealerLoc[key] = value;
                        arrayList.push(key);
                    } else {
                        var value = dealerLoc[key];
                        if($.inArray(dealers[i].Locality, value) == -1) {
                            value.push(dealers[i].Locality);
                        }
                    }
                }
                arrayList.sort();
                $.each(arrayList, function(key, value) {
                    regionDropDown.append($("<option></option>").val(value).html(value));
                });

                $scope.dealerLocation = dealerLoc;
                $scope.$apply();
                cookieLAD.setCookieWithPath("dealerLoc",JSON.stringify(dealerLoc),1,"/");
				if (GLOBAL_CONF.iso3MarketCode === "THA") {
					localStorage.setItem('dealerLoc', JSON.stringify(dealerLoc));
				}

            }, filters);
		};

        $scope.searchProvinceState();

		$scope.setDropdownState = function () {
			setTimeout(function () {
				if (window.location.hash) {
					var inputVal = $scope.searchInput;
					if(!inputVal || inputVal === '') {
						return;
					}
					if ($scope.singleDropdown) {
						if (inputVal.indexOf('=') >= 0) {
							var currentRegion = inputVal.split("=")[1];
							regionDropDown.select2("val", currentRegion);
						}
					} else {
						if (inputVal.indexOf(':') >= 0) {
							var currentRegion = inputVal.split(":")[1];
							var currentProvince = inputVal.split(":")[0];
							regionDropDown.select2("val", currentRegion);
							$scope.loadProvince(currentRegion, currentProvince);
						}
					}
				}
			}, 3000);
		};

		$scope.setDropdownState();

		$scope.removeAutocomplete = function(event){
			focusAutoComplete = false;
			if(event.keyCode === 27){
				$scope.clearAutocomplete();
			}else if(event.keyCode === 40){
				focusAutoComplete = true;
				$timeout(function() {
					$('.dealer-autocomplete-list li').first().find('a').focus();
				},0);
			}
		};

		$scope.removeAutocompleteList = function(query, event){
			if(event.keyCode === 27){
				focusAutoComplete = false;
				$scope.clearAutocomplete();
			}else if([38,40].indexOf(event.keyCode) !== -1){
				focusAutoComplete = true;
			}else if(event.keyCode === 13){
				$scope.locationSearch(query, event);
			}
		};

		$scope.blurAutocomplete = function(event){
			if(!focusAutoComplete){
				$scope.clearAutocomplete();
			}
			focusAutoComplete = false;
		};

		(function getNamesListForAutocomplete() {
			if(GLOBAL_CONF.iso3MarketCode === "BRA"){
				$http({method: 'GET', url: angular.element('.dl-config').attr('data-resource-path') + '.dealersearchbyname.data'})
					.then(function (data) {
						$scope.dealerNameList = data.data.data;
					});
			}
		}());

	}
});

define('dealerlocator/controllers/DealerResultsController', [
		'angular',
		'angular-route',
		'dealerlocator/dealerlocator.app',
		'jquery',
		'common',
		'ie-detect',
		'analytics/analyticsEventLayer'],
	function (angular, ngRoute, app, $, common, ieDetect, analyticsEventLayer) {

	app.controller('DealerResultsController', ['$scope', '$routeParams', '$rootScope', '$timeout', '$location', '$q', 'ConfigService', 'DeviceService', 'EncodingService', 'DealerService','GLOBAL_CONF', 'DL_SERVICE', DealerResultsController]);

	function DealerResultsController ($scope, $routeParams, $rootScope, $timeout, $location, $q, ConfigService, DeviceService, EncodingService, DealerService, GLOBAL_CONF, DL_SERVICE) {

		$scope.sizeElements();
		$scope.params = $routeParams;
		$scope.params.encodedSearchParams = EncodingService.encodeSlash($scope.params.searchParam.replace("#","%23")); //APR-9188
		$scope.dealerlocator.searchParams = $scope.params;
		$scope.meaMarketList = ["AFG","BHR","IRQ","JOR","KWT","LBN","OMN","QAT","SAU","ARE","YEM"];
		$scope.ccaMarketList = ["ATG","ABW","BHS","BMU","CYM","CUW","DMA","DOM","GRD","HTI","JAM","LCA","MAF","SUR","TTO","BRB"];
        $scope.caMarketList =  ["BLZ","CRI","GTM","HND","NIC","PAN","SLV"];
        $scope.ssaMarketList = ["AGO","BFA","CBV","CMR","COD","ETH","GAB","GHA","CIV","KEN","LBR","MDG","MWI","MUS","MOZ","NGA","SEN","SYC","SLE","ZAF","TZA","UGA","ZMB","ZWE"];
		$scope.arMarketList = ["ARG"]; //Argentina
		$scope.ecMarketList = ["ECU"]; //Ecuador
		$scope.zaMarketList = ["ZAF"]; //South Africa
		$scope.twMarketList = ["TWN"]; //Taiwan
		$scope.auMarketList = ["AUS"]; //Australia
		$scope.nzMarketList = ["NZL"]; //New Zealand
		$scope.braMarketList = ["BRA"]; //New Brazil
		//Market Require Filter Brand=Ford and Remove Language
		$scope.otherMarketList = ["PRI","PER","COL"];

		//Market Require Filter Brand=Ford and Remove Language
		//And Search Name first
		$scope.searchNameMarketList = ["CHL","VEN","COL"];

		//Market that do filter dealer distance again
		$scope.filterMarketList = ["KOR"];

		$scope.meaLocalityList = ["Abha","Abu Dhabi","Al Ahssa","Al Ain","Al Hassa","Amman","Baghdad","Barka","Basra","Beirut","Bureimi","Dammam","Doha","Dubai","Duhok","Erbil","Fujairah","Ha'fr Al Batin","Hail","Hazmieh","Irbid","Jeddah","Jizan","Jubail","Kabul","Madinah","Makkah","Muscat","Najran","Nizwa","Qassim","Ras Al Khaimah","Riyadh","Salalah","Sanaa","Seeb","Sharjah","Shuwaikh","Sitra","Sohar","Sulaymaniyah","Sur","Tabuk","Yanbu","Zarqa"];
		$scope.meaCountryList = ["Afghanistan","Bahrain","Iraq","Jordan","Kuwait","Lebanon","Oman","Qatar","Saudi Arabia","United Arab Emirates","Yemen"];
		$scope.buildAndPriceEnableFor = false;
		$scope.buildAndPriceUrl = '';

		if(typeof ConfigService.getSearchParams() == 'undefined'){
			ConfigService.setSearchParams($scope.params.searchParam);
			$scope.dealerlocator.isSearchEnabled =true;
		}

		if(ConfigService.getSearchParams()!= $scope.params.searchParam){
			$scope.dealerlocator.isSearchEnabled =true;
			if(typeof $scope.params.searchParam != 'undefined'){
				ConfigService.setSearchParams($scope.params.searchParam);
			}
		}

		if(typeof $scope.dealerlocator.dealer == 'undefined'){
			$scope.dealerlocator.dealer = null;
		}

		$scope.dealerlocator.displaySplash = false;

		$scope.checkService = DealerService.checkService;
		const getBuildAndPriceMotionStoredState = function () {
			if (sessionStorage.buildAndPriceDataModel) {
				return JSON.parse(sessionStorage.buildAndPriceDataModel);
			} else {
				return null;
			}
		}

		$scope.showDetails = function(index) {

			if (!$('#dealer-locator').attr('data-enableFds')) {
				$scope.dealerlocator.dealer = $scope.dealerlocator.dealers[index];
				$scope.dealerlocator.dealer.index = index;
				$scope.dealerlocator.dealer.distance = $scope.dealerlocator.dealers[index].distance;
				$scope.dealerlocator.map.deselectMarkers();
				if(!$scope.desktop.matches || !ieDetect.isIE()) {
					let pos = $('.dl-results').offset();
					if (pos) {
						$('body').scrollTop(pos.top);
					}
				}
				$('.dl-results-list').scrollTop(0);
			}
		};

		$scope.goToNextStepByc = function (index) {

			$scope.buildAndPriceEnableFor = Boolean($('input[name="buildAndPriceEnableFor"]').val());
			$scope.buildAndPriceUrl = $('input[name="buildAndPriceUrl"]').val();
			const buildAndPriceMotionStoredState = getBuildAndPriceMotionStoredState();

			if ($scope.buildAndPriceEnableFor &&
				buildAndPriceMotionStoredState &&
				buildAndPriceMotionStoredState.buildAndPriceUrl === $scope.buildAndPriceUrl) {

				let dealer = $scope.dealerlocator.dealers[index];
				buildAndPriceMotionStoredState.dealerSearchObject = {
					search: EncodingService.encodeSlash($scope.params.searchParam),
					dealer: dealer.DealerID,
					dealerName: dealer.DealerName,
					distance: ((dealer.distance) ? (dealer.distance / 1000).toFixed(2) : 0),
					phone: dealer.PrimaryPhone,
					postalCode: dealer.PostCode
				};

				if (buildAndPriceMotionStoredState.currentStep?.length === 0 ||
					!buildAndPriceMotionStoredState.currentStep) {
					buildAndPriceMotionStoredState.currentStep = 'NameplateAndDealerSelected';
				}

				delete buildAndPriceMotionStoredState.buildAndPriceUrl;
				sessionStorage.buildAndPriceDataModel = JSON.stringify(buildAndPriceMotionStoredState);


				const searchToBP = window.location.search;
				const paramsToBP = new URLSearchParams(searchToBP);
				const buildAndPriceParams = [];
				for (let [key, value] of paramsToBP.entries()) {
					if (key === 'nameplate' || key === 'wcmmode') {
						buildAndPriceParams.push(`${key}=${value}`);
					}
				}
				$scope.buildAndPriceUrl += '?' + buildAndPriceParams.join('&');

				document.location.replace($scope.buildAndPriceUrl);

			}
		};

		$scope.dealerCallback = function(dealer, index) {
			return function() {

				if($scope.dealerlocator.isDisplayDealerDetails){
					$scope.dealerlocator.isPushPinClicked = true;
					$scope.changePath(index);
				}

				$scope.dealerlocator.map.deselectMarkers();
				$scope.dealerlocator.map.selectMarker(index);
				$scope.dealerlocator.map.selectedMarker = $scope.dealerlocator.map.markers[index];

				$scope.dealerlocator.dealer = $scope.dealerlocator.dealers[index];
				$scope.dealerlocator.dealer.index = index;
				$scope.dealerlocator.dealer.distance = $scope.dealerlocator.dealers[index].distance;

				$scope.selectResult(index);

				if($('.result').eq(index).length > 0) {
					if ($scope.desktop.matches || ieDetect.isIE() < 9) {
						let pos = $('.result').eq(index).position();
						if (pos) {
							$('.dl-results-list').scrollTop(pos.top);
						}
					} else {
						let pos = $('.result').eq(index).offset();
						if (pos) {
							$('body').scrollTop(pos.top);
						}
					}
				}

				$scope.dealerlocator.map.panTo(dealer.location);
				$scope.trackClickDealerFromMap($scope.dealerlocator.dealer.DealerID, index + 1);
			};
		}

		$scope.changePath = function(index) {

			$location.path('search/'+EncodingService.encodeSlash($scope.params.searchParam)+'/dealer/'+$scope.dealerlocator.dealers[index].DealerID);
			$scope.dealerlocator.resultsVisible = true;
			$scope.dealerlocator.resultsAlwaysVisible = true;
			$scope.dealerlocator.dealer = $scope.dealerlocator.dealers[index];
			$scope.dealerlocator.dealer.index = index;
			$scope.dealerlocator.dealer.distance = $scope.dealerlocator.dealers[index].distance;
			$scope.dealerlocator.map.deselectMarkers();
			if(!$scope.desktop.matches || !ieDetect.isIE()) {
				let pos = $('.dealer-details').offset();
				if (pos) {
					$('body').scrollTop(pos.top);
				}
			}
		};

		$scope.showMoreDealers = function() {
			let props;
			$scope.page++;

			$scope.trackShowMore($scope.page + 1);

			if($scope.dealerlocator.filtersUpdated) {
				props = {
					deviceType : DeviceService.get(),
					pageNumber : $scope.page+1,
					searchType : $scope.dealerlocator.usingCurrentLocation ? 'current location' : 'manual search',
					searchSelection: $scope.dealerlocator.currentSearchType,
					totalResults : $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
					radius : $scope.filter.distance,
					dealerFilterType: 'services'
				};
				if($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
					props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
				}
				if($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
					props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
				}
			} else {
				props = {
					deviceType : DeviceService.get(),
					pageNumber : $scope.page+1,
					searchType : $scope.dealerlocator.usingCurrentLocation ? 'current location' : 'manual search',
					searchSelection: $scope.dealerlocator.currentSearchType,
					totalResults : $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
					radius : $scope.filter.distance
				};
				if($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
					props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
				}
				if($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
					props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
				}
			}
			$scope.dealerlocator.dealers = $scope.dealerlocator.totalDealers.slice(0, ($scope.page + 1) * 5);
			$scope.dealerlocator.map.displayDealers($scope.dealerlocator.dealers);
			$scope.dealerlocator.map.setBounds($scope.dealerlocator.dealers);
			$scope.dealerlocator.map.setZoom($scope.dealerlocator.map.getZoom() - 2);

			$scope.trackResultsPresent($scope.page + 1);
		};

		$scope.search = function(triggeredInSubmit) {

			if (!isNaN($routeParams.searchParam) && $routeParams.searchParam.length === 5 && $.inArray(GLOBAL_CONF.iso3MarketCode, $scope.braMarketList) > -1) {
				let params;
				if (+$routeParams.searchParam < 2000) {
				  params = {
					Ge: 2000,
					Lt: 3000,
				  };
				} else {
				  params = {
					Ge: Math.floor(+$routeParams.searchParam / 1000) * 1000,
					Lt: (Math.floor(+$routeParams.searchParam / 1000) * 1000) + 1000,
				  };
				}
				$scope.nameSearch(true, params);
			  } else {
				$scope.sizeElements();
				$scope.page = 0;
				$scope.dealerlocator.currentSearchType = 'location';

				let searchPromise = $q.defer();

				searchPromise.promise.then(function() {
					// Don't need to do anything if search succeeds
				},
				function(reason) {
					if (reason=='no-connection') {
						$scope.dealerlocator.errorMessage = $('.error-no-connection').text();
					} else {
						$scope.dealerlocator.errorMessage = $('.error-critical').text();
					}

					$scope.dealerlocator.searchLoading = false;
					$scope.sizeElements();
					$scope.trackError('system error');
				});

				if (navigator && navigator.onLine === false) {
					searchPromise.reject('no-connection');
				}

				$scope.dealerlocator.resultsAlwaysVisible = true;
				$scope.dealerlocator.resultsVisible = true;
				$scope.dealerlocator.searchLoading = true;
				$scope.dealerlocator.map.geocodeLocation($routeParams.searchParam, function(locations) {
					let filters = {
							CountryCode: GLOBAL_CONF.iso3MarketCode,
							Language: GLOBAL_CONF.languageCode
						},
						orFilterReduction = function(prev, curr) {
							prev[curr] = '1';
							return prev;
						},
						andFilterSetter = function(filter) {
							filters[filter] = 1;
						},
						postalCode = false;
						$scope.updateFilterLanguage(filters, locations);

					for (let filter of $scope.config.filters) {
						if(filter.selected) {
							if(filter.option.indexOf('_OR_') === -1 && filter.option.indexOf('_AND_') === -1) {
								filters[filter.option] = 1;
							} else {
								if(filter.option.indexOf('_OR_') > -1) {
									filters.OR_CLAUSES = filters.OR_CLAUSES || [];
									filters.OR_CLAUSES.push(
										filter.option.split('_OR_').reduce(orFilterReduction, {})
									);
								}
								if(filter.option.indexOf('_AND_') > -1) {
									filter.option.split('_AND_').forEach(andFilterSetter);
								}
							}
						}
					}

					if($scope.dealerlocator.disambiguationLatLng) {
						locations = [$scope.dealerlocator.disambiguationLatLng];
					}

					//To avoid second search
					if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.auMarketList) > -1) {
						locations.length = 1;
					}

					if(locations.length === 1) {
						if (locations[0]) {
							if (locations[0].types) {
								postalCode = _.contains(locations[0].types, 'postal_code');
							}

							$scope.dealerlocator.showFilter = true;
							$scope.dealerlocator.currentSearchLocation = $routeParams.searchParam.toLowerCase();
							$timeout(function() {
								searchPromise.reject('');
							}, 20000);
							$scope.dealerlocator.map.searchDealersByDistance(locations[0], $scope.filter.distance * $scope.config.distance.distanceConversion, $scope.config.displayLimit, function(dealers) {
								let i;
								searchPromise.resolve();

								//Filter Distance with Market disabled google distance calculation
								if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.filterMarketList) > -1) {
									for (i = 0; i < dealers.length; i++) {
										if(!dealers[i].distance || dealers[i].distanceError === "ZERO_RESULTS") {
											dealers[i].distance = dealers[i].__Distance * 1000;
										}
									}

									dealers.sort(function(a, b) {
										if(typeof a.distance === 'number' && typeof b.distance === 'number') {
											return a.distance - b.distance;
										} else {
											if(typeof a.distance !== 'number' && typeof b.distance !== 'number') {
												return a.directDistance - b.directDistance;
											}
											if(typeof a.distance === 'number') {
												return -1;
											} else {
												return 1;
											}
										}
									});
								}

								for (i = 0; i < dealers.length; i++) {
									let directionUrl = $scope.dealerlocator.map.getAddressDirectionsURL(dealers[i], $scope.dealerlocator.addressFormat, locations[0], DL_SERVICE.googleMapApi);
									
									dealers[i].directionsURL = directionUrl.replace("#","%23");
									dealers[i].callback = $scope.dealerCallback(dealers[i], i);

									dealers[i].index = i;

									DealerService.processDealer(dealers[i], $scope.config, $scope.params, $scope.$parent.callDealer, $scope.$parent.getDirections, $scope.$parent.dealerWebsite);
								}

								$scope.dealerlocator.totalDealers = dealers;
								if(DL_SERVICE.hideViewMoreCta && DL_SERVICE.hideViewMoreCta  === "true") {
									$scope.dealerlocator.dealers = $scope.dealerlocator.totalDealers;
								} else {
									$scope.dealerlocator.dealers = $scope.dealerlocator.totalDealers.slice(0, ($scope.page + 1) * 5);
								}
								$scope.$apply();
								$scope.sizeElements();

								if (!triggeredInSubmit) {
									$scope.trackInitSearch(postalCode);
								} else {
									$scope.trackSubmit(postalCode);
								}

								$scope.dealerlocator.map.clearDealers();
								$scope.dealerlocator.map.displayDealers($scope.dealerlocator.dealers);

								// Fix APR-1269:Locate a dealer - The first dealer should be located at center of map
								$("span.marker-label:first").waitUntilExists(function() {
									if($scope.dealerlocator.dealers.length){
										$scope.dealerlocator.map.markers[0].showInfoWindow();
										$scope.dealerlocator.map.map.setCenter($scope.dealerlocator.map.markers[0].getPosition());

									}
								});

								if (triggeredInSubmit) {
									$scope.trackResultsPresent(1, postalCode);
								}

								if($scope.dealerlocator.totalDealers.length) {
									$scope.dealerlocator.map.setBounds($scope.dealerlocator.dealers.concat(locations[0])); //, $scope.offset);
									if($scope.dealerlocator.map.getZoom() > 14) {
										$scope.dealerlocator.map.setZoom(14);
									} else {
										$scope.dealerlocator.map.setZoom($scope.dealerlocator.map.getZoom() - 2);
									}
								}

								if($scope.dealerlocator.totalDealers.length === 0) {
									$scope.dealerlocator.errorMessage = $('.error-no-results').text();

									$scope.filterSettings.hidden = false;
									$scope.dealerlocator.searchLoading = false;
									$scope.sizeElements();
									$scope.$apply();
									$scope.sizeElements();

									$scope.trackError('zero results');
								} else {
									for(i = 0; i < $scope.config.filters.length; i++) {
										if($scope.config.filters[i].selected) {
											servicesUpdated.push($scope.config.filters[i].option.toLowerCase());
										}
									}
									if((location.href.indexOf('en_au') >= 0 || location.host === 'www.ford.com.au') && !$scope.auFilterFlag){
										$scope.filterSettings.hidden = false;
										$scope.auFilterFlag = false;
									}else{
										$scope.filterSettings.hidden = true;
									}
									$scope.dealerlocator.errorMessage = null;
									$scope.dealerlocator.searchLoading = false;
									$scope.dealerlocator.showAdvancedSearch = false;
									$scope.$apply();
									$scope.sizeElements();
								}

							}, filters );
						} else {
							$scope.dealerlocator.searchLoading = false;
							$scope.dealerlocator.errorMessage = $('.error-no-results').text();
						}
					} else if(locations.length > 1) {
						$scope.dealerlocator.suggestions = {
							disambiguations: []
						};
						for (let location of locations) {
							$scope.dealerlocator.suggestions.disambiguations.push(location);
						}
						$scope.dealerlocator.searchLoading = false;
						$scope.$apply();

						$scope.sizeElements();

						$scope.trackError('disambiguation');
					} else if($scope.searchDealerNameFirst()) {
						//do nothing
						$scope.dealerlocator.searchLoading = false;
					} else {
						$scope.nameSearch();
					}

				});

			}
		}; // end $scope.search

		$scope.searchDropDown = function(triggeredInSubmit) {
            $("#dealer-locator .dd-loading").show();
            $scope.sizeElements();
            $scope.page = 0;
            $scope.dealerlocator.currentSearchType = 'dropdown';

			let searchPromise = $q.defer();

            searchPromise.promise.then(function() {
                // Don't need to do anything if search succeeds
            },
            function(reason) {
                if (reason=='no-connection') {
                    $scope.dealerlocator.errorMessage = $('.error-no-connection').text();
                } else {
                    $scope.dealerlocator.errorMessage = $('.error-critical').text();
                }

                $scope.dealerlocator.searchLoading = false;
                $scope.sizeElements();
                $scope.trackError('system error');
            });

            if (navigator && navigator.onLine === false) {
                searchPromise.reject('no-connection');
            }

            $scope.dealerlocator.resultsAlwaysVisible = true;
            $scope.dealerlocator.resultsVisible = true;
            $scope.dealerlocator.searchLoading = true;

			let filters = {};
			let searchKey = $scope.params.searchParam;

			if(searchKey.indexOf('AdministrativeArea') > -1) {
				filters = {
					CountryCode: GLOBAL_CONF.iso3MarketCode,
					AdministrativeArea: "",
					Brand: "Ford"
				};
			} else {
				filters = {
					CountryCode: GLOBAL_CONF.iso3MarketCode,
					Language: GLOBAL_CONF.languageCode,
					AdministrativeArea: "",
					Locality: ""
				};
			}

			let orFilterReduction = function(prev, curr) {
                    prev[curr] = '1';
                    return prev;
                },
                andFilterSetter = function(filter) {
                    filters[filter] = 1;
                };

			if (searchKey.split(":").length > 1) {
				filters.AdministrativeArea = searchKey.split(":")[1];
				filters.Locality           = searchKey.split(":")[0];
			} else if (searchKey.split("=").length > 1) {
				filters.AdministrativeArea = searchKey.split("=")[1];
			}

            for (let filter of $scope.config.filters) {
                if(filter.selected) {
                    if(filter.option.indexOf('_OR_') === -1 && filter.option.indexOf('_AND_') === -1) {
                        filters[filter.option] = 1;
                    } else {
                        if(filter.option.indexOf('_OR_') > -1) {
                            filters.OR_CLAUSES = filters.OR_CLAUSES || [];
                            filters.OR_CLAUSES.push(
								filter.option.split('_OR_').reduce(orFilterReduction, {})
                            );
                        }
                        if(filter.option.indexOf('_AND_') > -1) {
							filter.option.split('_AND_').forEach(andFilterSetter);
                        }
                    }
                }
            }

            $scope.dealerlocator.showFilter = true;
            $scope.dealerlocator.currentSearchLocation = $routeParams.searchParam.toLowerCase();
            $timeout(function() {
                searchPromise.reject('');
                $("#dealer-locator .dd-loading").hide();
            }, 20000);
			let timer = setInterval(function() {
                if(window.callingSearchProvinceState) {
                    return;
                } else {
                    clearInterval(timer);
                }


            $scope.dealerlocator.map.searchDealersByProperties(1, function bindResultDealer(dealers) {
				let props,
                    servicesUpdated = [],
                    i;

                searchPromise.resolve();

                for (i = 0; i < dealers.length; i++) {

					let directionUrl = $scope.dealerlocator.map.getAddressDirectionsURL(dealers[i], $scope.dealerlocator.addressFormat, DL_SERVICE.googleMapApi);
					
                    dealers[i].directionsURL = directionUrl.replace("#","%23");

                    dealers[i].callback = $scope.dealerCallback(dealers[i], i);

                    dealers[i].index = i;

                    DealerService.processDealer(dealers[i], $scope.config, $scope.params, $scope.$parent.callDealer, $scope.$parent.getDirections, $scope.$parent.dealerWebsite);
                }
                $scope.dealerlocator.totalDealers = dealers;
                if(DL_SERVICE.hideViewMoreCta && DL_SERVICE.hideViewMoreCta  === "true") {
                    $scope.dealerlocator.dealers = $scope.dealerlocator.totalDealers;
                } else {
                    $scope.dealerlocator.dealers = $scope.dealerlocator.totalDealers.slice(0, ($scope.page + 1) * 5);
                }
                $scope.$apply();
                $scope.sizeElements();

                $scope.dealerlocator.map.clearDealers();
                $scope.dealerlocator.map.displayDealers($scope.dealerlocator.dealers);

                // Fix APR-1269:Locate a dealer - The first dealer should be located at center of map
				$("span.marker-label:first").waitUntilExists(function() {
					if($scope.dealerlocator.dealers.length){
						$scope.dealerlocator.map.markers[0].showInfoWindow();
						$scope.dealerlocator.map.map.setCenter($scope.dealerlocator.map.markers[0].getPosition());

					}
				});


                if($scope.dealerlocator.totalDealers.length) {
                    $('.dealer-map-container #map').addClass('show');
                    $('.dl-search .dl-heading').addClass('hide');
                    $('.dealer-map-container .dealer-map-landing').addClass('hide');
                    $scope.dealerlocator.map.setZoom(14);
                    if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.nzMarketList) > -1) {
                        $scope.dealerlocator.map.setZoom(9);
                    }
                    $scope.dealerlocator.map.setCenter($scope.dealerlocator.totalDealers[0].location); //, $scope.offset);
                }

                if($scope.dealerlocator.totalDealers.length === 0) {
                    $scope.dealerlocator.errorMessage = $('.error-no-results').text();

                    $scope.filterSettings.hidden = false;
                    $scope.dealerlocator.searchLoading = false;
                    $scope.sizeElements();
                    $scope.$apply();
                    $scope.sizeElements();

                    $scope.trackError('zero results');
                } else {
                    for(i = 0; i < $scope.config.filters.length; i++) {
                        if($scope.config.filters[i].selected) {
                            servicesUpdated.push($scope.config.filters[i].option.toLowerCase());
                        }
                    }
                    if($scope.dealerlocator.filtersUpdated) {
                        props = {
                            deviceType : DeviceService.get(),
                            pageNumber : $scope.page+1,
                            location : $scope.dealerlocator.currentSearchLocation.toLowerCase(),
                            searchType : $scope.dealerlocator.usingCurrentLocation ? 'current location' : 'manual search',
                            searchSelection: $scope.dealerlocator.currentSearchType,
                            totalResults : $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
                            radius : $scope.filter.distance,
                            dealerFilterType: 'services'
                        };
                        if(servicesUpdated.length > 0) {
                            props.facetSelection = servicesUpdated.join(',');
                        }
                    } else {

                        props = {
                            deviceType : DeviceService.get(),
                            pageNumber : $scope.page+1,
                            location : $scope.dealerlocator.currentSearchLocation.toLowerCase(),
                            searchSelection: 'location',
                            searchType : $scope.dealerlocator.usingCurrentLocation ? 'current location' : 'manual search',
                            totalResults : $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
                            radius : $scope.filter.distance
                        };
                        if(servicesUpdated.length > 0) {
                            props.facetSelection = servicesUpdated.join(',');
                        }
                    }
                    $scope.filterSettings.hidden = true;
                    $scope.dealerlocator.errorMessage = null;
                    $scope.dealerlocator.searchLoading = false;
                    $scope.dealerlocator.showAdvancedSearch = false;
                    $scope.$apply();
                    $scope.sizeElements();
                }

                $("#dealer-locator .dd-loading").hide();
				$('.dl-search .dl-heading').removeClass('active').siblings('.dl-search-dropdown').removeClass('open');

            }, filters );
            }, 3000);
        }; // end $scope.searchDropDown

		$scope.nameSearch = function(triggeredInSubmit, postalCodeParams) {
            $scope.sizeElements();
            $scope.page = 0;
			$scope.dealerlocator.currentSearchType = 'dealer name';
			let searchPromise = $q.defer(),
			    containsParameters = '';

			searchPromise.promise.then(function(data) {
				// Don't need to do anything if search succeeds
			},
			function(reason) {
				if (GLOBAL_CONF.iso3MarketCode === 'BRA') {
					return;
				}
				if (reason == 'no-connection') {
					$scope.dealerlocator.errorMessage = $('.error-no-connection').text();
				} else {
					$scope.dealerlocator.errorMessage = $('.error-critical').text();
				}
				$scope.dealerlocator.searchLoading = false;
				$scope.sizeElements();
				$scope.trackError('system error');
			});

			if (navigator && navigator.onLine === false) {
				searchPromise.reject('no-connection');
			}

			$scope.dealerlocator.resultsAlwaysVisible = true;
            $scope.dealerlocator.resultsVisible = true;
            $scope.dealerlocator.searchLoading = true;

			let filters = {
					CountryCode: GLOBAL_CONF.iso3MarketCode,
					Language: GLOBAL_CONF.languageCode
				},
				orFilterReduction = function(prev, curr) {
					prev[curr] = '1';
					return prev;
				},
				andFilterSetter = function(filter) {
					filters[filter] = 1;
				};

                $scope.updateFilterLanguage(filters, '');

			for (let filter of $scope.config.filters) {
				if(filter.selected) {
					if(filter.option.indexOf('_OR_') === -1 && filter.option.indexOf('_AND_') === -1) {
						filters[filter.option] = 1;
					} else {
						if(filter.option.indexOf('_OR_') > -1) {
							filters.OR_CLAUSES = filters.OR_CLAUSES || [];
							filters.OR_CLAUSES.push(
								filter.option.split('_OR_').reduce(orFilterReduction, {})
							);
						}
						if(filter.option.indexOf('_AND_') > -1) {
							filter.option.split('_AND_').forEach(andFilterSetter);
						}
					}
				}
			}

			$timeout(function() {
				searchPromise.reject('');
			}, 20000);

			if (postalCodeParams) {
				filters.PostCode = postalCodeParams;
			} else {
				containsParameters = {DealerNameSearch:EncodingService.encodeMapCharacters($routeParams.searchParam).toLowerCase()};
			}

			$scope.dealerlocator.map.searchDealersByProperties($scope.config.displayLimit, function(dealers) {
				searchPromise.resolve(dealers);
				// ENCODING CHARACTERS FOR MAPS API RENDERING
				$scope.dealerlocator.currentSearchName = $routeParams.searchParam;

				for (let i = 0; i < dealers.length; i++) {

					let directionUrl = $scope.dealerlocator.map.getAddressDirectionsURL(dealers[i], $scope.dealerlocator.addressFormat, DL_SERVICE.googleMapApi);
					
					dealers[i].directionsURL = directionUrl.replace("#","%23");

					dealers[i].callback = $scope.dealerCallback(dealers[i], i);

					dealers[i].index = i;

					DealerService.processDealer(dealers[i], $scope.config, $scope.params, $scope.$parent.callDealer, $scope.$parent.getDirections, $scope.$parent.dealerWebsite);
				}

				$scope.dealerlocator.totalDealers = dealers;
				$scope.dealerlocator.dealers = $scope.dealerlocator.totalDealers.slice(0, ($scope.page + 1) * 5);
				$scope.dealerlocator.searchLoading = false;
				$scope.dealerlocator.showAdvancedSearch = false;
				$scope.$apply();
				$scope.sizeElements();

				if (!triggeredInSubmit) {
					$scope.trackInitSearch();
				} else {
					$scope.trackSubmit();
				}

				$scope.dealerlocator.map.clearDealers();
				$scope.dealerlocator.map.displayDealers($scope.dealerlocator.dealers);

				// Fix APR-1269:Locate a dealer - The first dealer should be located at center of map
				$("span.marker-label:first").waitUntilExists(function() {
					if($scope.dealerlocator.dealers.length){
						$scope.dealerlocator.map.markers[0].showInfoWindow();
						$scope.dealerlocator.map.map.setCenter($scope.dealerlocator.map.markers[0].getPosition());

					}
				});

				if (triggeredInSubmit) {
					$scope.trackResultsPresent(1);
				}

				if($scope.dealerlocator.totalDealers.length) {
					$scope.dealerlocator.map.setZoom(14);
                    $scope.dealerlocator.map.setCenter($scope.dealerlocator.totalDealers[0].location); //, $scope.offset);
				}

				if ($scope.dealerlocator.totalDealers.length === 0) {
				    //call normal search if matched
				    if($scope.searchDealerNameFirst()) {
				        if (GLOBAL_CONF.iso3MarketCode !== "BRA"){
				            $scope.search();
				        }
				    } else {

                        $scope.dealerlocator.errorMessage = $('.error-no-results').text();

                        // if no results on 2nd search, routed back to main controller
                        if (!$scope.dealerlocator.filtersUpdated) {
                            // set to true to stop filter menu sliding back after no dealer search and then making a correct dealer search
                            $scope.filterSettings.hidden = true;
                            $scope.dealerlocator.dealer = undefined;
                            $scope.dealerlocator.dealers = undefined;

                        } else {
                            // set to false to allow filter menu to remain open when filtered selected options produce no dealerships
                            $scope.filterSettings.hidden = false;
                        }


                        $scope.$apply();
                        $scope.sizeElements();
                        $scope.trackError('zero results');
					}
				} else {
				    $scope.dealerlocator.showFilter = true;
					if((location.href.indexOf('en_au') >= 0 || location.host === 'www.ford.com.au') && !$scope.auFilterFlag){
						$scope.filterSettings.hidden = false;
						$scope.auFilterFlag = false;
					}else{
						$scope.filterSettings.hidden = true;
					}
					$scope.dealerlocator.errorMessage = null;
					$scope.dealerlocator.searchLoading = false;
                    $scope.dealerlocator.showAdvancedSearch = false;
					$scope.$apply();
					$scope.sizeElements();
				}
			}, filters, containsParameters);
		};

		$scope.$on('filters-updated', function(e) {
			let data = $scope.collectDataWithFilters();
            analyticsEventLayer.getDealerLocatorEvents().trackAdvancedSearch(data);
			let servicesUpdated = [], props;

			for(let filter of $scope.config.filters) {
				if(filter.selected) {
					servicesUpdated.push(filter.option.toLowerCase());
				}
			}

			props = {
				deviceType : DeviceService.get(),
				radius : $scope.filter.distance,
				dealerFilterType: 'services',
				facetSelection: servicesUpdated.join(',')
			};
			if($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
				props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
			}
			if($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
				props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
			}

			$scope.dealerlocator.filtersUpdated = true;
			$scope.auFilterFlag = true;

			if($scope.dealerlocator.searchType === 'location') {
				$scope.search(true);
			} else {
				if($scope.dealerlocator.searchType === 'dealername') {
					$scope.nameSearch(true);
				}
				if($scope.dealerlocator.searchType === 'dropdown') {
                    $scope.searchDropDown(true);
                }
			}
			$scope.dealerlocator.isSearchEnabled = false;
			if(!$scope.desktop.matches || !ieDetect.isIE()) {
				let pos = $('.dl-search-type').offset();
				if (pos) {
					$('body').scrollTop(pos.top);
				}
			}
		});

		$scope.selectResult = function(index) {
			for (let dealer of $scope.dealerlocator.dealers) {
				dealer.selected = false;
			}
			if (index) $scope.dealerlocator.dealers[index].selected = true;
			$scope.$apply();
		};

		$scope.showResultsBlock = function() {
			$scope.dealerlocator.resultsAlwaysVisible = true;
			$scope.dealerlocator.resultsVisible = true;
			if(typeof $scope.dealerlocator.map.selectedMarker != "undefined"){
				$scope.dealerlocator.map.selectedMarker.hideInfowindow();
			}
		};

		$scope.openServices = function(type, e) {
			// currently used for analytics
			if(!$(e.target).parent().hasClass('accordian-open')) {
				let props = {
					dealerCode: $scope.dealerlocator.dealer.DealerID.toLowerCase(),
					position: $scope.dealerlocator.dealer.index + 1 || 1,
					totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
					radius : $scope.filter.distance,
					infoType: type,
					deviceType: DeviceService.get(),
					actionType: 'expand'
				};
				if($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
					props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
				}
				if($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
					props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
				}

				let target = e.toElement || e.relatedTarget || e.target;
				if(target && $(target).text()) {
					$scope.trackExpandDealerInfo($(target).text());
				}
			}
		};
		$scope.trackInitSearch = function(postalCode) {
			let data = $scope.collectDataWithFilters();
			data.usingCurrentLocation = $scope.dealerlocator.usingCurrentLocation;
			data.postalCode = postalCode;
			analyticsEventLayer.getDealerLocatorEvents().trackInitSearch(data);
		};

		$scope.trackSubmit = function(postalCode) {
			let data = $scope.collectDataWithFilters();
			data.usingCurrentLocation = $scope.dealerlocator.usingCurrentLocation;
			data.postalCode = postalCode;
			analyticsEventLayer.getDealerLocatorEvents().trackSubmit(data);
		};

		$scope.trackShowMore = function(pageNumber) {
			let data = $scope.collectDataWithFilters();
			data.usingCurrentLocation = $scope.dealerlocator.usingCurrentLocation;
			data.pageNumber = pageNumber;
			analyticsEventLayer.getDealerLocatorEvents().trackShowMore(data);
		};

		$scope.trackResultsPresent = function(pageNumber, postalCode) {
			let data = $scope.collectDataWithFilters();
			data.usingCurrentLocation = $scope.dealerlocator.usingCurrentLocation;
			data.pageNumber = pageNumber;
			data.postalCode = postalCode;
			analyticsEventLayer.getDealerLocatorEvents().trackResultsPresent(data);
		};

		$scope.trackClickDealerFromMap = function(dealerID, resultPosition) {
			let data = $scope.collectDataWithFilters();
			data.usingCurrentLocation = $scope.dealerlocator.usingCurrentLocation;
			data.resultPosition = resultPosition;
			data.dealerID = dealerID;
			data.ctaPlacement = 'map view';
		};

		$scope.updateFilterLanguage = function(filters, locations) {

		    //apply to all markets since this is Ford project
		    filters.Brand = "Ford";

            //MEA List
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.meaMarketList) > -1) {
                if(GLOBAL_CONF.languageCode == "en") {
                    filters.Language = "English";
                } else {
                    filters.Language = "Arabic";
                }
                filters.Brand = "Ford";
                delete filters.CountryCode;

                if(locations) {
					if (locations[0]) {
						if ($.inArray(locations[0].address_components[0].short_name, $scope.meaLocalityList) > -1) {
							if (filters.Language === "English" && locations[0].address_components[0].short_name.toLowerCase() === $routeParams.searchParam.toLowerCase()) {
								filters.Locality = $routeParams.searchParam;
							} else if (filters.Language === "Arabic") {
								if ($routeParams.searchParam.length <= locations[0].address_components[0].short_name.length) {
									filters.Locality = $routeParams.searchParam;
								}
							}
							//reset
							if ($scope.filter.distance === "a") {
								$scope.filter.distance = "100";
							}
						}
						if ($.inArray(locations[0].address_components[0].long_name, $scope.meaCountryList) > -1) {
							filters.Country = locations[0].address_components[0].long_name;
							if (locations[0].address_components[0].long_name === "United Arab Emirates") {
								filters.Country = "UAE";
							}
							$scope.filter.distance = "a";
						}
					}
                }
            }
            //CCA List
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.ccaMarketList) > -1) {
                filters.Brand = "Ford";
                delete filters.Language;
                delete filters.CountryCode;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.caMarketList) > -1) {
                filters.Brand = "Ford";
                delete filters.Language;
                delete filters.CountryCode;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.ssaMarketList) > -1) {
                filters.Brand = "Ford";
                delete filters.Language;
                delete filters.CountryCode;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.arMarketList) > -1) {
                filters.Brand = "Ford";
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.ecMarketList) > -1) {
                filters.Brand = "Ford";
                filters.CountryCode = "EC";
                delete filters.Language;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.zaMarketList) > -1) {
                filters.Brand = "Ford";
                filters.Language = "English";
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.twMarketList) > -1) {
                filters.Brand = "Ford";
                delete filters.Language;
                delete filters.CountryCode;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.otherMarketList) > -1) {
                filters.Brand = "Ford";
                delete filters.Language;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.auMarketList) > -1) {
                filters.Brand = "Ford";
                delete filters.Language;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.searchNameMarketList) > -1) {
                filters.Brand = "Ford";
                delete filters.Language;
            }
        };

        $scope.searchDealerNameFirst = function() {
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.ccaMarketList) > -1) {
                return true;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.caMarketList) > -1) {
                return true;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.ssaMarketList) > -1) {
                return true;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.arMarketList) > -1) {
                return true;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.ecMarketList) > -1) {
                return true;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.zaMarketList) > -1) {
                return true;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.twMarketList) > -1) {
                return true;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.auMarketList) > -1) {
                return true;
            }
            if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.searchNameMarketList) > -1) {
                return true;
			}

			return $.inArray(GLOBAL_CONF.iso3MarketCode, $scope.braMarketList) > -1 && $('#search-type-dealername').is(':checked');
        };

        //update search type if matched
        if($scope.searchDealerNameFirst()) {
            $scope.dealerlocator.searchType = "dealername";
        }

		if($scope.dealerlocator.searchType === 'location') {
			if((typeof $scope.dealerlocator.dealers == 'undefined' || $scope.dealerlocator.dealers.length<=0)||(typeof $scope.dealerlocator.isSearchEnabled == 'undefined')||(typeof $scope.dealerlocator.isSearchEnabled != 'undefined' && $scope.dealerlocator.isSearchEnabled)){
			$scope.search();
			$scope.dealerlocator.isSearchEnabled=false;
			} else {
				$scope.$on('$viewContentLoaded', function(){

					$timeout(function() {
						$scope.selectResult($scope.dealerlocator.dealer.index);
						if ($scope.desktop.matches || ieDetect.isIE() < 9) {
							let pos = $('.result').eq($scope.dealerlocator.dealer.index).position();
							if (pos) {
								$('.dl-results-list').scrollTop(pos.top);
							}
						} else {
							let pos = $('.result').eq($scope.dealerlocator.dealer.index).offset();
							if (pos) {
								$('body').scrollTop(pos.top);
							}
						}
					},0);
				});
			}
		} else if($scope.dealerlocator.searchType === 'dealername') {
            if((typeof $scope.dealerlocator.dealers == 'undefined' || $scope.dealerlocator.dealers.length<=0)||(typeof $scope.dealerlocator.isSearchEnabled == 'undefined')||(typeof $scope.dealerlocator.isSearchEnabled != 'undefined' && $scope.dealerlocator.isSearchEnabled)){
                $scope.nameSearch();
                $scope.dealerlocator.isSearchEnabled=false;
            } else {
                $scope.$on('$viewContentLoaded', function(){

                    $timeout(function() {
                        $scope.selectResult($scope.dealerlocator.dealer.index);
                        if ($scope.desktop.matches || ieDetect.isIE() < 9) {
                            let pos = $('.result').eq($scope.dealerlocator.dealer.index).position();
                            if (pos) {
                                $('.dl-results-list').scrollTop(pos.top);
                            }
                        } else {
                            let pos = $('.result').eq($scope.dealerlocator.dealer.index).offset();
                            if (pos) {
                                $('body').scrollTop(pos.top);
                            }
                        }
                    },0);
                });
            }
		} else if($scope.dealerlocator.searchType === 'dropdown') {
              if((typeof $scope.dealerlocator.dealers == 'undefined' || $scope.dealerlocator.dealers.length<=0)||(typeof $scope.dealerlocator.isSearchEnabled == 'undefined')||(typeof $scope.dealerlocator.isSearchEnabled != 'undefined' && $scope.dealerlocator.isSearchEnabled)){
                  $scope.searchDropDown();
                  $scope.dealerlocator.isSearchEnabled=false;
              } else {
                  $scope.$on('$viewContentLoaded', function(){

                      $timeout(function() {
                          $scope.selectResult($scope.dealerlocator.dealer.index);
                          if ($scope.desktop.matches || ieDetect.isIE() < 9) {
                              let pos = $('.result').eq($scope.dealerlocator.dealer.index).position();
                              if (pos) {
                                  $('.dl-results-list').scrollTop(pos.top);
                              }
                          } else {
                              let pos = $('.result').eq($scope.dealerlocator.dealer.index).offset();
                              if (pos) {
                                  $('body').scrollTop(pos.top);
                              }
                          }
                      },0);
                  });
              }
        }

		$scope.$watch(
			function($scope) {
				return $scope.dealerlocator.fromFilter;
			},
			function() {
				if((typeof $scope.dealerlocator.fromFilter != 'undefined' && $scope.dealerlocator.fromFilter) ) {
					//Commenting it for Defect DE14762
					//window.scrollTo($('#search-field').offset().top,$('#search-field').offset().left);
					$('.filters').scrollTop(0);
					$scope.dealerlocator.fromFilter = false;
				}
			}
		);
		$scope.dealerlocator.isDisplayDealerDetails = false;
	}
});

define('dealerlocator/controllers/DealerDetailsController', [
		'angular', 
		'angular-route', 
        'dealerlocator/dealerlocator.app',
		'jquery',
		'_',
		'common',
		'ie-detect',
		'cookie-LAD',
		'ladSEOfriendly',
		'analytics/analyticsEventLayer'], 
	function (angular, ngRoute, app, $, _, common, ieDetect, cookieLAD, ladSEOfriendly, analyticsEventLayer) {

	app.controller('DealerDetailsController', ['$scope', '$timeout', '$q', '$routeParams', '$location',  '$browser', 'ConfigService', 'DeviceService', 'EncodingService', 'DealerService','GLOBAL_CONF', 'DL_SERVICE', 'utilFormatterFilter', DealerDetailsController]);

	function DealerDetailsController ($scope, $timeout, $q, $routeParams, $location,  $browser, ConfigService, DeviceService, EncodingService, DealerService, GLOBAL_CONF, DL_SERVICE, utilFormatterFilter) {
	
	$scope.auMarketList = ["AUS"]; //Australia
	$scope.params = $routeParams;
    var lastQuery                     = cookieLAD.getCookie('lad-last-query');
    var isEnableSEOfriendly           = ladSEOfriendly.readConfig();

		if (!_.isEmpty($routeParams) && $routeParams.dealerID && $routeParams.dealerID !== '' && $routeParams.dealerID !== null && isEnableSEOfriendly) {
			$scope.params.dealerID = $routeParams.dealerID.slice($routeParams.dealerID.lastIndexOf('-') + 1, $routeParams.dealerID.length);
		}

		if (_.isEmpty($routeParams)) {
			var locationString = decodeURIComponent(window.location).trim();
			
			//code to handle extra parameter in search string for AU market
			 if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.auMarketList) > -1) {
				if(locationString.indexOf('?')>-1){ 
					var newLocationString = locationString.slice(0, locationString.indexOf('?'), locationString.length)
					if(typeof newLocationString !== 'undefined' && newLocationString !=''){
						locationString = newLocationString;
						console.log(newLocationString);
					}
				 }
			 }

			var baseHrefVal    = decodeURIComponent($browser.baseHref());
			if (locationString.indexOf(baseHrefVal) + baseHrefVal.length < locationString.length) {
				var getUrlParam        = locationString.slice(locationString.indexOf(baseHrefVal) + baseHrefVal.length, locationString.length);
				var getDealerID        = utilFormatterFilter(getUrlParam, 'url-path');
				getDealerID            = getDealerID.slice(getDealerID.lastIndexOf('-') + 1, getDealerID.length);
				$scope.params.dealerID = getDealerID;
			} else {
				return false;
			}
		}

		$scope.dealerlocator.hasMoreQuery = false;
		if (isEnableSEOfriendly && lastQuery !== '') {
			$scope.dealerlocator.hasMoreQuery = lastQuery;
		}

		if(typeof $scope.params.searchParam != 'undefined'){
			$scope.params.encodedSearchParams = EncodingService.encodeSlash($scope.params.searchParam.replace("#","%23"));
        }
										 
		$scope.filterSettings.hidden = true;
		
		$scope.dealerlocator.displaySplash = false;

		$scope.dealerlocator.searchParams = $scope.params;

		$scope.checkService = DealerService.checkService;

		$scope.auMarketList = ["AUS"]; //Australia

		if(typeof ConfigService.getSearchParams() == 'undefined'){
			ConfigService.setSearchParams($scope.params.searchParam);
			$scope.dealerlocator.isSearchEnabled = true;
		}

		if(ConfigService.getSearchParams() != $scope.params.searchParam){
			if(typeof $scope.params.searchParam != 'undefined'){
				ConfigService.setSearchParams( $scope.params.searchParam);
			} 
			$scope.dealerlocator.isSearchEnabled = true;
		}else{

		}
		$scope.sizeElements();

    function getQueryDistance(variable) {
      var query = window.location.search.substring(1);
      var vars = query.split('&');
      for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split('=');
        if (decodeURIComponent(pair[0]) == variable) {
          return decodeURIComponent(pair[1]);
        }
      }
    }

		$scope.$on('$viewContentLoaded', function(){
			$timeout(function() {
				if(typeof $scope.dealerlocator.isPushPinClicked != 'undefined' && $scope.dealerlocator.isPushPinClicked){
					$scope.dealerlocator.isPushPinClicked=false;
				}else{				
					$scope.showResultsBlock();
				}
				$('.dl-results-list').scrollTop(0);
			},0);
		});

		$scope.showResultsBlock = function() {
			$scope.dealerlocator.resultsAlwaysVisible = true;
			$scope.dealerlocator.resultsVisible = true;
			if(typeof $scope.dealerlocator.map.selectedMarker != 'undefined'){
				//$scope.dealerlocator.map.selectedMarker.hideInfowindow();
			}
			
			$scope.trackClickDealer();
		};

		$scope.dealerlocator.isDisplayDealerDetails = true;

		var searchPromise = $q.defer();

		searchPromise.promise.then(function() {
            // Don't need to do anything if search succeeds
        },
        function() {

            if(typeof $scope.params.encodedSearchParams !== 'undefined'){
                $scope.dealerlocator.errorMessage = $('.error-critical').text();
            }
        
            $scope.dealerlocator.searchLoading = false;
            $scope.sizeElements();                    
            /*var props = {
                errorType: 'system error',
                location: $scope.dealerlocator.currentSearchLocation.toLowerCase(),
                searchSelection: $scope.dealerlocator.currentSearchType,
                radius: $scope.filter.distance,
                deviceType: DeviceService.get()
            };*/
        });

		var filters = {};

		if ($scope.params.dealerID) {
			filters.DealerID = $scope.params.dealerID;
		} else {
			filters.CountryCode = GLOBAL_CONF.iso3MarketCode;
		}

		if(!$scope.dealerlocator.isSearchEnabled && $scope.dealerlocator.dealer && $scope.dealerlocator.dealer.DealerID === $scope.params.dealerID) {
			$scope.dealerlocator.map.selectMarker($scope.dealerlocator.dealer.index);
			$scope.dealerlocator.map.selectedMarker= $scope.dealerlocator.map.markers[$scope.dealerlocator.dealer.index];
			$scope.dealerlocator.map.setCenter($scope.dealerlocator.dealer.location); //, $scope.offset);
			$scope.dealerlocator.map.showInfoWindow($scope.dealerlocator.dealer.index);
			var props = {
				dealerCode: $scope.dealerlocator.dealer.DealerID.toLowerCase(),
				position: $scope.dealerlocator.dealer.index + 1,
				totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
				radius : $scope.filter.distance,
				deviceType: DeviceService.get()
			};
			if($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
				props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
			}
			if($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
				props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
			}
		} else {
			$scope.dealerlocator.isSearchEnabled =false;

			if($scope.params.searchParam) {
				$scope.dealerlocator.searchLoading = true;
				$timeout(function() {
					searchPromise.reject();
				}, 20000);

				$scope.dealerlocator.map.geocodeLocation($scope.params.searchParam, function(locations) {

                    //To avoid second search
                    if($.inArray(GLOBAL_CONF.iso3MarketCode, $scope.auMarketList) > -1) {
                        locations.length = 1;
                    }

					if(locations.length === 1) {
						var radius = getQueryDistance('distance') || null;
						$scope.dealerlocator.map.searchDealersByDistance(locations[0], null, $scope.config.displayLimit, function(dealers) {
							if(dealers && dealers.length >=1) {
								searchPromise.resolve();
								$scope.dealerlocator.dealer = dealers[0];
								$scope.dealerlocator.totalDealers = [$scope.dealerlocator.dealer];

								//$scope.dealerlocator.dealer.directionsURL = $scope.dealerlocator.map.getAddressDirectionsURL($scope.dealerlocator.dealer, $scope.dealerlocator.addressFormat, '', DL_SERVICE.googleMapApi);

								$scope.dealerlocator.dealer.callback = function(dealer, index) {
									return function() {
										//$scope.dealerlocator.resultsVisible = true;
										//$scope.$apply();

										$scope.dealerlocator.map.deselectMarkers();
										$scope.dealerlocator.map.selectMarker(index);
										$scope.dealerlocator.map.selectedMarker= $scope.dealerlocator.map.markers[index];

										$scope.dealerlocator.dealer = $scope.dealerlocator.dealer;
										$scope.dealerlocator.dealer.index = index;
										//$scope.dealerlocator.dealer.distance = $scope.dealerlocator.dealers[index].distance;

                                        if($('.result').eq(index).length > 0) {
											if ($scope.desktop.matches || ieDetect.isIE() < 9) {
												var pos = $('.result').eq(index).position();
												if (pos) {
													$('.dl-results-list').scrollTop(pos.top);
												}
											} else {
												var pos = $('.result').eq(index).offset();
												if (pos) {
													$('body').scrollTop(pos.top);
												}
											}
                                        }

                                        $scope.dealerlocator.map.panTo(dealer.location);

										/*var props = {
										    location: $scope.dealerlocator.currentSearchLocation.toLowerCase(),
											dealerCode: dealer.EntityID.toLowerCase(),
											position: index + 1,
											totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
											radius : $scope.filter.distance,
											deviceType: DeviceService.get()
										};*/
									};
								}(dealers[0], 0);

								DealerService.processDealer($scope.dealerlocator.dealer, $scope.config, $scope.params, $scope.$parent.callDealer, $scope.$parent.getDirections, $scope.$parent.dealerWebsite);

                                $scope.dealerlocator.showFilter = true;
								$scope.dealerlocator.searchLoading = false;
								$scope.dealerlocator.showAdvancedSearch = false;
								$scope.dealerlocator.map.displayDealers([$scope.dealerlocator.dealer]);
								$scope.dealerlocator.map.setCenter($scope.dealerlocator.dealer.location); //, $scope.offset);
								$scope.dealerlocator.map.setZoom(14);
								$scope.$apply();
								$scope.sizeElements();

								var props = {
									dealerCode: $scope.dealerlocator.dealer.DealerID.toLowerCase(),
									position: $scope.dealerlocator.dealer.index ? $scope.dealerlocator.dealer.index + 1 : 1,
									totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
									radius : $scope.filter.distance,
									deviceType: DeviceService.get()
								};
                                $scope.dealerlocator.currentSearchLocation = $scope.params.searchParam;
								props.location = $scope.params.searchParam;
								if($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
									props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
								}
								if($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
									props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
								}

								$("span.marker-label:first").waitUntilExists(function() {
                                    if($scope.dealerlocator.dealer){
                                        $scope.dealerlocator.dealer.callback();
                                    }
                                });

                                if($scope.dealerlocator.totalDealers.length) {
                                    $scope.dealerlocator.map.setBounds($scope.dealerlocator.dealer); //, $scope.offset);
                                    if($scope.dealerlocator.map.getZoom() > 14) {
                                        $scope.dealerlocator.map.setZoom(14);
                                    } else {
                                        $scope.dealerlocator.map.setZoom($scope.dealerlocator.map.getZoom() - 2);
                                    }
                                }
							} else {
								searchPromise.reject();
							}
						}, filters);
					} else {
						searchPromise.resolve();
						$location.path('/search/' + $scope.params.searchParam);
					}
				});

			} else {
				$scope.dealerlocator.searchLoading = true;
				$timeout(function() {
					searchPromise.reject();
				}, 20000);
				$scope.dealerlocator.map.searchDealersByProperties(1, function(dealers) {
					if(dealers && dealers.length > 0) {
						searchPromise.resolve();
						var servicesExist,
							serviceList;
						if ($scope.dealerlocator.dealer && $scope.dealerlocator.dealer.servicesExist && $scope.dealerlocator.dealer.serviceList) {
							servicesExist = $scope.dealerlocator.dealer.servicesExist;
							serviceList = $scope.dealerlocator.dealer.serviceList;
						}
						$scope.dealerlocator.dealer = dealers[0];
						$scope.dealerlocator.dealer.servicesExist = servicesExist;
						$scope.dealerlocator.dealer.serviceList = serviceList;
						$scope.dealerlocator.totalDealers = [$scope.dealerlocator.dealer];

						//$scope.dealerlocator.dealer.directionsURL = $scope.dealerlocator.map.getAddressDirectionsURL($scope.dealerlocator.dealer, $scope.dealerlocator.addressFormat, '', DL_SERVICE.googleMapApi);

						$scope.dealerlocator.dealer.callback = function(dealer, index) {
							return function() {
								$scope.dealerlocator.map.deselectMarkers();
								$scope.dealerlocator.map.selectMarker(index);
								$scope.dealerlocator.map.selectedMarker= $scope.dealerlocator.map.markers[index];

								var props = {
									namesearchTerm: $scope.dealerlocator.dealer.DealerName.toLowerCase(),
									dealerCode: dealer.DealerID.toLowerCase(),
									position: index + 1,
									totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
									radius : $scope.filter.distance,
									deviceType: DeviceService.get()
								};
							};
						}(dealers[0], 0);

						DealerService.processDealer($scope.dealerlocator.dealer, $scope.config, $scope.params, $scope.$parent.callDealer, $scope.$parent.getDirections, $scope.$parent.dealerWebsite);

                        $scope.dealerlocator.showFilter = true;
						$scope.dealerlocator.searchLoading = false;
						$scope.dealerlocator.showAdvancedSearch = true;
						$scope.dealerlocator.map.displayDealers([$scope.dealerlocator.dealer]);
						$scope.dealerlocator.map.setCenter($scope.dealerlocator.dealer.location); //, $scope.offset);
						$scope.dealerlocator.map.setZoom(14);
						$scope.updateSearchField($scope.dealerlocator.dealer.DealerName);
						$scope.$apply();
						$scope.sizeElements();

						var props = {
							dealerCode: $scope.dealerlocator.dealer.DealerID.toLowerCase(),
							position: $scope.dealerlocator.dealer.index ? $scope.dealerlocator.dealer.index + 1 : 1,
							totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
							radius : $scope.filter.distance,
							deviceType: DeviceService.get()
						};
						if($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
							props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
						}
						if($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
							props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
						}

						$("span.marker-label:first").waitUntilExists(function(){
							if($scope.dealerlocator && $scope.dealerlocator.dealer && $scope.dealerlocator.map && $scope.dealerlocator.map.markers[0]){
								$scope.dealerlocator.map.setCenter($scope.dealerlocator.dealer.location);
								$scope.dealerlocator.map.setZoom(14);
								$scope.dealerlocator.dealer.callback($scope.dealerlocator.dealer, 0);
								$scope.dealerlocator.map.markers[0].showInfoWindow();
							}
						});
					} else {
						searchPromise.reject();
					}
				}, filters);
			}
		}

		$scope.openServices = function(type, e) {
			// currently used for analytics
			if(!$(e.target).parent().hasClass('accordian-open')) {
				var props = {
					dealerCode: $scope.dealerlocator.dealer.DealerID.toLowerCase(),
					position: $scope.dealerlocator.dealer.index + 1 || 1,
					totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
					radius : $scope.filter.distance,
					infoType: type,
					deviceType: DeviceService.get(),
					actionType: 'expand'
				};
				if($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
					props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
				}
				if($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
					props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
				}

                var target = e.toElement || e.relatedTarget || e.target;
				if(target && $(target).text()) {
					$scope.trackExpandDealerInfo($(target).text());
				}
			}
		};

		$(".viewOtherServices").on("change", function() {
			var result     = $(this).val();

			var accContent = $(this).closest(".accordian-content");
			if (result !== "N/A") {
				accContent.find(".hours-info").addClass('ng-hide');
				accContent.find("#" + result).removeClass('ng-hide');
				accContent.find(".hours-label").addClass('ng-hide');
				accContent.find(".hours-label." + result).removeClass('ng-hide');
			}else{
				accContent.find(".hours-info").removeClass('ng-hide');
				accContent.find(".hours-label").removeClass('ng-hide');

				accContent.find(".hours-info").addClass('ng-hide');
				accContent.find(".hours-label").addClass('ng-hide');
			}
		});

		$scope.dealerCTA = function(e) {
			var ctaName = $(e.target).eq(0).text().toLowerCase(),
				props = {
					dealerCode: $scope.dealerlocator.dealer.DealerID.toLowerCase(),
					position: $scope.dealerlocator.dealer.index + 1 || 1,
					totalResults: $scope.dealerlocator.totalDealers ? $scope.dealerlocator.totalDealers.length : 1,
					radius : $scope.filter.distance,
					infoType: ctaName,
					deviceType: DeviceService.get(),
					actionType: 'select'
				};
			if($scope.dealerlocator.currentSearchType === 'location' && $scope.dealerlocator.currentSearchLocation) {
				props.location = $scope.dealerlocator.currentSearchLocation.toLowerCase();
			}
			if($scope.dealerlocator.currentSearchType === 'dealer name' && $scope.dealerlocator.currentSearchName) {
				props.namesearchTerm = $scope.dealerlocator.currentSearchName.toLowerCase();
			}
			var target = e.toElement || e.relatedTarget || e.target;
			if (target && $(target).text()) {
				$scope.trackClickCTA($(target).text());
			}
		};

		$scope.trackClickDealer = function () {
			var data = $scope.collectDataWithFilters();
			if ($scope.dealerlocator.dealer) {
				data.resultPosition = $scope.dealerlocator.dealer.index + 1;
				data.dealerID = $scope.dealerlocator.dealer.DealerID;
			} else {
				data.resultPosition = '';
				data.dealerID = '';
			}
			data.ctaPlacement = 'list view';
			analyticsEventLayer.getDealerLocatorEvents().trackClickDealer(data);
		};
		
		$scope.trackExpandDealerInfo = function(infoType) {
			analyticsEventLayer.getDealerLocatorEvents().trackExpandDealerInfo(infoType);
		};
		
		$scope.trackClickCTA = function(ctaName) {
			analyticsEventLayer.getDealerLocatorEvents().trackClickCTA(ctaName);
		};
		
		$scope.$on('filters-updated', function(e) {
			if($scope.params.searchParam) {
				$location.path('/search/' + $scope.params.searchParam);
			} else {
				$location.path('/search/' + $scope.dealerlocator.dealer.DealerName);
			}
		});
	}

});

define('dealerlocator/directives/DealerFilterDirective',[
		'angular', 
		'angular-sanitize', 
        'dealerlocator/dealerlocator.app',
		'common'], 
	function (angular, ngSanitize, app, common) {



	app.directive('guxDealerFilter', ['$sanitize', guxDealerFilter]);

	function guxDealerFilter($sanitize) {
		return {
			restrict: 'EA',
			template: '<div class="columns small-10 filter-row-list">' +
				'<p><input type="checkbox" data-ng-attr-tabindex="{{filterSettings.hidden ? -1 : 0}}" ng-model="filter.selected" value="{{ filter.option }}" id="{{ filter.option }}" ng-class="{checked:filter.selected}" class="custom-checkbox">' + 
				'<label for="{{ filter.option }}" ng-bind-html="filter.displayFilter"></label></p>' + 
				'</div><div class="columns small-2">' +
				'<button class="info-tooltip" ng-class="{ active: filter.showTooltip }" data-ng-attr-tabindex="{{filterSettings.hidden ? -1 : 0}}" ng-show="filter.tooltip" ng-click="showFilterTooltip(filter)"><span class="icon-info"></span></button>' +
				'</div>' +
				'<div class="columns small-12 large-12 tooltip-content-wrap" ng-class="{ hide: !filter.showTooltip }"><div class="tooltip-content">' +
				'<button class="tooltip-close" ng-click="filter.showTooltip = false"></button>' +
				'<h6>{{ filter.displayFilter }}</h6><p>{{ filter.tooltip }}</p></div></div>',
			link: function (scope, element, attrs) {
			}
		};
	}
});
define('dealerlocator/directives/DealerItemDirective', ['angular', 'dealerlocator/dealerlocator.app'], 
	function (angular, app) {

	var templateHtml = angular.element('#directive-dealer-item').html();

	app.directive('ngGuxDealerItem', dealerItem);

	function dealerItem() {
		return {
			restrict: 'A',
			replace: true,
			scope: {
				config: '=',
				dealer: '=',
				params: '=',
				isTooltip: '=',
				isDetails: '=details',
				resultCtrlShowDetails: '&',
				mainCtrlCallDealer: '&',
				mainCtrlGetDirections: '&',
				mainCtrlDealerWebsite: '&',
				resultCtrlRedirectByc: '&'
			},
			template: templateHtml,
			controller: ['$scope', 'DealerService', 'GLOBAL_CONF', function ($scope, DealerService, GLOBAL_CONF) {
				var addressLines = [];

				$scope.init = function (dealer, config) {
					$scope.dealer = dealer;
				};

				$scope.commaSeparatedServices = DealerService.commaSeparatedServices;
				$scope.isNewzealand =  GLOBAL_CONF.iso3MarketCode === 'NZL' ? true : false;
			}]
		};
	}
});

define('dealerlocator/filters/utilFormatterFilter', ['angular', 'dealerlocator/dealerlocator.app'], 
	function (angular, app) {



	app.filter('utilFormatter', ['ConfigService', utilFormatter]);

	function utilFormatter(ConfigService) {
		var config = ConfigService.getConfig();

		return function (source, formatter) {
			if (formatter == 'distance') {
				return formatDistance(source);
			} else if (formatter == 'opening-hours') {
				return formatOpeningHours(source);
			} else if (formatter == 'url-path') {
				return formatURLpath(source);
			}
		};

		/**
		 * @param source
		 * @returns {string} formatted string if source contains number, source otherwise
		 */
		function formatDistance(source) {
			var number = parseFloat(source);
			if (number) {
				if (number >= 1) {
					number = (Math.round(number * 1000) / 1000).toFixed(2);
				} else {
					number = Math.round(number * 10) / 10;
				}
			}
			return number ? number + ' ' + config.distance.unit : source;
		}

		/**
		 * @param source
		 * @return {string} formatted string if source is hour(s) string, source otherwise
		 */
		function formatOpeningHours(source) {
			if (source) {
				var split = source.split(':'),
					result = '';
				if (split.length == 2) {
					result = split[0] + config.timeFormatHoursDelimiter + split[1];
				} else if (split.length == 4) {
					result = split[0] + config.timeFormatHoursDelimiter + split[1] +
						' ' + config.timeFormatOpenCloseDelimiter + ' ' +
						split[2] + config.timeFormatHoursDelimiter + split[3];
				} else {
					result = source;
				}
				return result;
			} else {
				return '';
			}
		}

		/**
		 * @param source
		 * @return {string} formatted string to URL path
		 */
		function formatURLpath(source) {
			if (source) {
				var result = '';
				// trim whitespace
				source     = source.replace(/^\s+|\s+$/g, '');
				// remove special character
				source     = source.replace(/[`~!@#$%^&*()_|+\=?;:'",.<>\{\}\[\]\\\/]/gi, '');
				// convert space to hyphens
				source     = source.replace(/\s+/g, '-').toLowerCase();
				// replace multiple consecutive hyphens with one
				result     = source.replace(/-{2,}/g, '-');
				return result;
			} else {
				return '';
			}
		}

	}
});

define('cookie-LAD', ['jquery'], function ($) {
	'use strict';

    var api = {};
    /**
     * Truncate given text to given maximum count of chars
     * @param element - DOM element - paragraph to be truncated
     * @param moreText - "more" string
     * @param maxLength - max chars count
     */
    api.setCookie =  function(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + cvalue + "; " + expires;
    };

    api.setCookieWithPath = function(cname, cvalue, exdays, path) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays*24*60*60*1000));
        var expires = "expires="+d.toUTCString();
        document.cookie = cname + "=" + cvalue + "; " + expires + "; path=" + path;
    };

    api.getCookie = function(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1);
        if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
    }
    return "";
    };

    api.eraseCookie = function(cname) {
        this.setCookie(cname,"",-1);
    };

    api.eraseCookieWithPath = function(cname, path) {
        this.setCookieWithPath(cname,"",-1,path);
    };

    return api;
});


define('ladSEOfriendly', ['jquery'], function ($) {
    'use strict';

    var api = {};

    api.readConfig = function (keyValue) {
        var result    = false;
        var config    = $('.dl-config').data('dl-config');
        var configVal = {
            seoFriendlyURL: false,
            baseHrefKeys: false,
            addressForURLfriendly: false
        };

        if (config.serviceConfig) {
            for (var i = 0; i < config.serviceConfig.length; i++) {
                var objKey = config.serviceConfig[i].key;
                var objVal = config.serviceConfig[i].value;
                objVal     = decodeURIComponent(objVal.toString());
                if (objKey === 'seoFriendlyURL') {
                    configVal.seoFriendlyURL = objVal;
                } else if (objKey === 'baseHrefKeys') {
                    configVal.baseHrefKeys = objVal;
                } else if (objKey === 'addressForURLfriendly') {
                    configVal.addressForURLfriendly = objVal;
                }
            }
        }

        if (configVal.baseHrefKeys != '' && configVal.baseHrefKeys !== null && configVal.baseHrefKeys !== false && (configVal.seoFriendlyURL === true || configVal.seoFriendlyURL == 'true')) {
            result = true;
        }
        if (keyValue) {
            var objData = configVal[keyValue];
            if (objData && objData !== '' && objData !== null) {
                return objData;
            } else {
                return false;
            }
        }
        return result;
    };

    api.createPath = function (data) {
        if (!data) {
            return false;
        }
        var baseHref     = false;
        var locationPath = decodeURIComponent(window.location);
        var keys         = data.split(',');
        if (keys[0] === '') {
            return false;
        }
        for (var i = 0; i < keys.length; i++) {
            var key        = '';
            var keyForTest = '';
            key            = keys[i].toString();
            key            = key.replace(/^\s+|\s+$/g, ''); // trim whitespace
            keyForTest     = key + '?wcmmode=disabled';
            if (locationPath.indexOf(keyForTest) > -1) {
                baseHref = locationPath.slice(0, locationPath.indexOf(keyForTest) + keyForTest.length) + '/';
            } else if (locationPath.indexOf(key) > -1) {
                baseHref = locationPath.slice(0, locationPath.indexOf(key) + key.length) + '/';
            }
        }
        if (baseHref && baseHref != '' && baseHref !== null) {
            return baseHref;
        } else {
            return false;
        }
    };

    return api;

});


define('dealerlocator/dealerlocator', [
		'jquery',
		'ie-detect',
		'common',
		'angular',
		'angular-route',
		'angular-sanitize',
		'dealerlocator/dealerlocator.app',
		'dealerlocator/controllers/MainController',
		'dealerlocator/controllers/DealerSearchController',
		'dealerlocator/controllers/DealerResultsController',
		'dealerlocator/controllers/DealerDetailsController',
		'dealerlocator/directives/DealerFilterDirective',
		'dealerlocator/directives/DealerItemDirective',
		'dealerlocator/services/AddressService',
		'dealerlocator/services/ApiService',
		'dealerlocator/services/ConfigService',
		'dealerlocator/services/DealerService',
		'dealerlocator/services/DeviceService',
		'dealerlocator/services/EncodingService',
		'dealerlocator/services/PremiumService',
		'dealerlocator/services/TimeService',
		'dealerlocator/config',
		'dealerlocator/filters/utilFormatterFilter',
		'cookie-LAD',
		'ladSEOfriendly',
		'configurationProvider'],
	function ($,
			  ieDetect,
			  common,
			  angular,
			  ngRoute,
			  ngSanitize,
			  app,
			  MainController,
			  DealerSearchController,
			  DealerResultsController,
			  DealerDetailsController,
			  DealerFilterDirective,
			  DealerItemDirective,
			  AddressService,
			  ApiService,
			  ConfigService,
			  DealerService,
			  DeviceService,
			  EncodingService,
			  PremiumService,
			  TimeService,
			  config,
			  utilFormatterFilter,
			  cookieLAD,
			  ladSEOfriendly,
			  configProvider) {

		function init() {
			if (ieDetect.isIE() && ieDetect.isIE() < 9) {
				$('#search-field').removeAttr('data-ng-model');
			}
			cookieLAD.eraseCookie('lad-last-query');

			var isEnableSEOfriendly = ladSEOfriendly.readConfig();
			var baseHrefTag         = $('.lad-base-href');

			if (isEnableSEOfriendly && baseHrefTag.length) {
				var hrefKeys = ladSEOfriendly.readConfig('baseHrefKeys');
				if (!hrefKeys) {
					console.log('ERROR: base href value is null');
					return;
				} else {
					var baseHref = ladSEOfriendly.createPath(hrefKeys);
					if (baseHref) {
						baseHrefTag.attr('href', baseHref);
					} else {
						console.log('ERROR: base href value is incorrect');
						return;
					}
				}
			}

			common.checkboxes('input[type=checkbox]');
			common.accordians('#global-ux');

            window.initMap = function () {
                app.constant("GLOBAL_CONF",conf) ;
				app.constant("DL_SERVICE",readConfig()) ;
				//GuxGlobals.dlService = readConfig();
                angular.bootstrap(document.getElementById('dealer-locator'), ['dealerlocator']);
			};
			
			var conf = configProvider.get($('#global-market-configuration'));
			var script = document.createElement('script');
			script.setAttribute('type', 'text/javascript');
			script.setAttribute('src', 'https://maps.googleapis.com/maps/api/js?client=gme-fordmotorcompany2&language='+ checkUndefine(conf.localeLowerHyphenUpper) + '&region=' + checkUndefine(conf.marketCode) + '&libraries=places&channel=' + conf.marketCode + '&callback=initMap');
			document.body.appendChild(script);

			var props = {
				deviceType: 'mobile'
			};

			initEventDealer();
		}
		
		function checkUndefine(val){
			if(typeof(val)  === "undefined") 
			  return '';
			else
			   return val;
		}

		function readConfig() {
			var config = $('.dl-config').data('dl-config'),
				newConfig = {},
				i;

			if(config) {

				// Localisation and Search config
				if(config.localisationAndSearchConfig) {
					for (i = 0; i < config.localisationAndSearchConfig.length; i++) {
						newConfig[config.localisationAndSearchConfig[i].key] = config.localisationAndSearchConfig[i].value;
					}
				}

				// Service config
				if(config.serviceConfig) {
					for (i = 0; i < config.serviceConfig.length; i++) {
						newConfig[config.serviceConfig[i].key] = config.serviceConfig[i].value;
					}
				}

				// User Experience config
				if(config.userExperienceConfig) {
					for (i = 0; i < config.userExperienceConfig.length; i++) {
						newConfig[config.userExperienceConfig[i].key] = config.userExperienceConfig[i].value;
					}
				}

				// Filter config
				if(config.filterConfig && config.filterConfig[0] && config.filterConfig[0].filters) {
					newConfig.filters = {};
					for (i = 0; i < config.filterConfig[0].filters.length; i++) {
						newConfig.filters[config.filterConfig[0].filters[i].option] = [];
						newConfig.filters[config.filterConfig[0].filters[i].option].push(config.filterConfig[0].filters[i]);
					}
				}

				// Category config
				if(config.categoryConfig && config.categoryConfig[0] && config.categoryConfig[0].categories) {
					newConfig.categories = config.categoryConfig[0].categories;
					for (i = 0; i < newConfig.categories.length; i++) {
						newConfig.categories[i].name = newConfig.categories[i].key;
						newConfig.categories[i].services = newConfig.categories[i].value;
					}
				}

				// Distance config
				if(config.distanceConfig && config.distanceConfig[0]) {
					newConfig.distance = config.distanceConfig[0];
				}
				//Distance config, there in some cases, generated few empty object
				if(config.distanceConfig && config.distanceConfig.length > 1 && !config.distanceConfig[0].defaultDistance) {
                    newConfig.distance = config.distanceConfig[config.distanceConfig.length-1];
				}

				// Address format
				if(config.dealerItemAddressFormat && config.dealerItemAddressFormat.entries) {
					newConfig.dealerItemAddressFormat = [];
					for (i = 0; i < config.dealerItemAddressFormat.entries.length; i++) {
						newConfig.dealerItemAddressFormat[i] = config.dealerItemAddressFormat.entries[i].entry;
					}
					newConfig.dealerItemAddressSeparator = config.dealerItemAddressFormat.separator;
				}
			}

			return newConfig;
		}

		function initEventDealer(){
			var $checkbox = $('.dl-form-holder input[type="checkbox"]'),
					textDefault = $('select.select-control option:selected').text() + '',
					selectChange = $('select.select-change');

			$checkbox.on("change", function(){
				var $parent = this.closest(".wrap");
				    $($parent).find('.slide-box').slideToggle();
			});

			$('.dl-form-title').on("click", function(){
				var $formParent = this.closest(".dl-form-holder");
				    $($formParent).find('.form').slideToggle();
				    $(this).toggleClass('active');
			});

			$('select.select-control').on("change", function(){
				var newSelectText  = $('select.select-control option:selected').text() + '';
				if(textDefault !== newSelectText){
					selectChange.prop( "disabled", false );
				}
			});

			$(document).on('keydown','.dealer-autocomplete-list', function(event){
            	event.stopPropagation();
            	event.preventDefault();
            	var focusIndex = $('.dealer-autocomplete-list').find(':focus').closest('li').index();
            	if(event.keyCode == 40){
            		if($('.dealer-autocomplete-list').find('a').length !== focusIndex + 1){
        				$('.dealer-autocomplete-list').find('a').eq([focusIndex+1]).focus();
            		}
            	}else if(event.keyCode == 38){
            		if(focusIndex){
            			$('.dealer-autocomplete-list').find('a').eq([focusIndex-1]).focus();
            		}
            	}
            })

		}

		return {
			init: init
		};
	});

define('dealerlocator/dealerlocator.app', 
	[
		'angular',
		'dealer-locator/last-search-cookie.app',
		'angular-route',
		'angular-sanitize'
	], 
	function (angular, lastsearchcookie, ngRoute, ngSanitize) {

	return angular.module('dealerlocator',['ngRoute', 'lastsearchcookie', 'ngRoute', 'ngSanitize']);
});
define('dealerlocator/config', [
        'angular',
        'angular-route',
        'dealerlocator/dealerlocator.app',
        'cookie-LAD',
        'ladSEOfriendly'],
    function (angular, ngRoute, app, cookieLAD, ladSEOfriendly) {

        /** ngInject */
        app.config(['$routeProvider', '$locationProvider',
            function ($routeProvider, $locationProvider) {
                $routeProvider.when('/search/:searchParam/', {
                    //templateUrl: '/assets/js/dealerlocator/views/list.html',
                    template: $('#list-template').html(),
                    controller: 'DealerResultsController'
                })
                .when('/search/:searchParam/dealer/:dealerID/', {
                    //templateUrl: '/assets/js/dealerlocator/views/details.html',
                    template: $('#details-template').html(),
                    controller: 'DealerDetailsController'
                })
                .when('/dealer/:dealerID', {
                    //templateUrl: '/assets/js/dealerlocator/views/details.html',
                    template: $('#details-template').html(),
                    controller: 'DealerDetailsController'
                });
                if (ladSEOfriendly.readConfig() && $('.ie9').length === 0) {
                    $routeProvider.otherwise({
                        template: $('#details-template').html(),
                        controller: 'DealerDetailsController'
                    });

                    // causing the js error while trigger other popup overlay
                    // the popup overlay hashtag is getting conflict with angular
                    // since we have no implement the 
                    // <meta name="fragment" content="!"> and base on google
                    // https://developers.google.com/webmasters/ajax-crawling/docs/specification
                    // it is already deprecated.

                    // $locationProvider.html5Mode({
                    //     enabled: true,
                    //     requireBase: true
                    // });
                }
            }
        ]);

        app.run(['$rootScope', '$location', '$routeParams', function ($rootScope, $location, $routeParams) {
            $rootScope.$on("$locationChangeStart", function (e, currentLocation, previousLocation) {
                var lastQuery = cookieLAD.getCookie('lad-last-query');
                if (currentLocation !== previousLocation && lastQuery !== currentLocation) {
                    cookieLAD.setCookieWithPath('lad-last-query', previousLocation, 1, '/');
                }
            })
        }]);

    });

require(['jquery', 'dealerlocator/dealerlocator'], function ($, dealerlocator) {
    $(document).ready(function () {
        if($('#dealer-locator').length > 0) {
            dealerlocator.init();
        }
    });
});

